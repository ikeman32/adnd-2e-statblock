/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type Creature5eTools =
    | {
          name: string;
          /**
           * Used anywhere a shortened form of the creatures name is required (e.g. in legendary action headers).
           * If not supplied, a shortened name will be automatically generated from the creature's full name.
           * Alternatively use "true" if the "shortName" should be an exact copy of the creature's "name".
           */
          shortName?: string | boolean;
          alias?: string[];
          /**
           * A group name, indexed by search. E.g. searching "Lycanthrope" would otherwise fail to find anything.
           * Only works on the bestiary page, not in the full site search.
           */
          group?: null | string[];
          /**
           * Used in sidekicks, which can have levels (and generally do not have alignment)
           */
          level?: number;
          size: Size[];
          sizeNote?: string;
          type:
              | {
                    type: CreatureType;
                    /**
                     * Size of the individual creatures that make up the swarm.
                     */
                    swarmSize?:
                        | "F"
                        | "D"
                        | "T"
                        | "S"
                        | "M"
                        | "L"
                        | "H"
                        | "G"
                        | "C"
                        | "V";
                    tags?: (
                        | string
                        | {
                              tag: string;
                              prefix: string;
                          }
                    )[];
                }
              | CreatureType;
          source: string;
          /**
           * Sub-source text that is shown when hovered.
           */
          sourceSub?: string;
          otherSources?: OtherSources;
          reprintedAs?: ReprintedAs;
          alignment?: Align[];
          alignmentPrefix?: string;
          ac: AcItem[];
          hp:
              | {
                    average: number;
                    formula: string;
                }
              | {
                    special?: string;
                };
          speed: Speed;
          str: number | null;
          dex: number | null;
          con: number | null;
          int: number | null;
          wis: number | null;
          cha: number | null;
          save?: {
              str?: string;
              dex?: string;
              con?: string;
              int?: string;
              wis?: string;
              cha?: string;
          };
          skill?: {
              acrobatics?: string;
              "animal handling"?: string;
              arcana?: string;
              athletics?: string;
              deception?: string;
              history?: string;
              insight?: string;
              intimidation?: string;
              investigation?: string;
              medicine?: string;
              nature?: string;
              perception?: string;
              performance?: string;
              persuasion?: string;
              religion?: string;
              "sleight of hand"?: string;
              stealth?: string;
              survival?: string;
              other?: {
                  oneOf?: {
                      acrobatics?: string;
                      "animal handling"?: string;
                      arcana?: string;
                      athletics?: string;
                      deception?: string;
                      history?: string;
                      insight?: string;
                      intimidation?: string;
                      investigation?: string;
                      medicine?: string;
                      nature?: string;
                      perception?: string;
                      performance?: string;
                      persuasion?: string;
                      religion?: string;
                      "sleight of hand"?: string;
                      stealth?: string;
                      survival?: string;
                      [k: string]: unknown;
                  };
                  [k: string]: unknown;
              }[];
          };
          senses?: string[] | null;
          passive: number | string | null;
          languages?: string[] | null;
          pbNote?: string;
          cr?:
              | string
              | {
                    cr: string;
                    lair?: string;
                    coven?: string;
                    xp?: number;
                };
          vulnerable?: DamageVulnerabilityArray;
          resist?: DamageResistArray;
          immune?: DamageImmunityArray;
          conditionImmune?: ConditionImmunityArray;
          spellcasting?: EntrySpellcasting[] | null;
          trait?:
              | {
                    name: string;
                    entries: (
                        | EntrySection
                        | EntryEntries
                        | EntryQuote
                        | EntryInlineEntries
                        | EntryEntriesInlineEntries
                        | EntryOptions
                        | EntryTableGroup
                        | EntryTable
                        | EntryTableRow
                        | EntryTableCell
                        | EntryList
                        | EntryBonus
                        | EntryBonusSpeed
                        | EntryDice
                        | EntryAbilityDc
                        | EntryAbilityAttackMod
                        | AbilityGeneric
                        | EntryLink
                        | EntryOptFeature
                        | EntryInset
                        | EntryInsetReadaloud
                        | EntryVariant
                        | EntryVariantInner
                        | EntryVariantSub
                        | EntryItem
                        | EntryItemSub
                        | EntryItemSpell
                        | EntryImage
                        | EntryGallery
                        | EntryActions
                        | EntryAttack
                        | EntryDataCreature
                        | EntryDataSpell
                        | EntryDataTrapHazard
                        | EntryDataObject
                        | EntryDataItem
                        | EntryStatblock
                        | EntryRefClassFeature
                        | EntryRefSubclassFeature
                        | EntryRefOptionalfeature
                        | EntryHr
                        | EntrySpellcasting
                        | EntryFlowchart
                        | EntryFlowBlock
                        | EntryWrapped
                        | string
                        | number
                    )[];
                    type?: "entries" | "inset";
                    /**
                     * Forces a sort order. Traits with sort orders will always be arranged before those without.
                     */
                    sort?: number;
                }[]
              | null;
          actionNote?: string;
          actionHeader?: (
              | EntrySection
              | EntryEntries
              | EntryQuote
              | EntryInlineEntries
              | EntryEntriesInlineEntries
              | EntryOptions
              | EntryTableGroup
              | EntryTable
              | EntryTableRow
              | EntryTableCell
              | EntryList
              | EntryBonus
              | EntryBonusSpeed
              | EntryDice
              | EntryAbilityDc
              | EntryAbilityAttackMod
              | AbilityGeneric
              | EntryLink
              | EntryOptFeature
              | EntryInset
              | EntryInsetReadaloud
              | EntryVariant
              | EntryVariantInner
              | EntryVariantSub
              | EntryItem
              | EntryItemSub
              | EntryItemSpell
              | EntryImage
              | EntryGallery
              | EntryActions
              | EntryAttack
              | EntryDataCreature
              | EntryDataSpell
              | EntryDataTrapHazard
              | EntryDataObject
              | EntryDataItem
              | EntryStatblock
              | EntryRefClassFeature
              | EntryRefSubclassFeature
              | EntryRefOptionalfeature
              | EntryHr
              | EntrySpellcasting
              | EntryFlowchart
              | EntryFlowBlock
              | EntryWrapped
              | string
              | number
          )[];
          action?:
              | {
                    name: string;
                    entries: (
                        | EntrySection
                        | EntryEntries
                        | EntryQuote
                        | EntryInlineEntries
                        | EntryEntriesInlineEntries
                        | EntryOptions
                        | EntryTableGroup
                        | EntryTable
                        | EntryTableRow
                        | EntryTableCell
                        | EntryList
                        | EntryBonus
                        | EntryBonusSpeed
                        | EntryDice
                        | EntryAbilityDc
                        | EntryAbilityAttackMod
                        | AbilityGeneric
                        | EntryLink
                        | EntryOptFeature
                        | EntryInset
                        | EntryInsetReadaloud
                        | EntryVariant
                        | EntryVariantInner
                        | EntryVariantSub
                        | EntryItem
                        | EntryItemSub
                        | EntryItemSpell
                        | EntryImage
                        | EntryGallery
                        | EntryActions
                        | EntryAttack
                        | EntryDataCreature
                        | EntryDataSpell
                        | EntryDataTrapHazard
                        | EntryDataObject
                        | EntryDataItem
                        | EntryStatblock
                        | EntryRefClassFeature
                        | EntryRefSubclassFeature
                        | EntryRefOptionalfeature
                        | EntryHr
                        | EntrySpellcasting
                        | EntryFlowchart
                        | EntryFlowBlock
                        | EntryWrapped
                        | string
                        | number
                    )[];
                }[]
              | null;
          bonusNote?: string;
          bonusHeader?: (
              | EntrySection
              | EntryEntries
              | EntryQuote
              | EntryInlineEntries
              | EntryEntriesInlineEntries
              | EntryOptions
              | EntryTableGroup
              | EntryTable
              | EntryTableRow
              | EntryTableCell
              | EntryList
              | EntryBonus
              | EntryBonusSpeed
              | EntryDice
              | EntryAbilityDc
              | EntryAbilityAttackMod
              | AbilityGeneric
              | EntryLink
              | EntryOptFeature
              | EntryInset
              | EntryInsetReadaloud
              | EntryVariant
              | EntryVariantInner
              | EntryVariantSub
              | EntryItem
              | EntryItemSub
              | EntryItemSpell
              | EntryImage
              | EntryGallery
              | EntryActions
              | EntryAttack
              | EntryDataCreature
              | EntryDataSpell
              | EntryDataTrapHazard
              | EntryDataObject
              | EntryDataItem
              | EntryStatblock
              | EntryRefClassFeature
              | EntryRefSubclassFeature
              | EntryRefOptionalfeature
              | EntryHr
              | EntrySpellcasting
              | EntryFlowchart
              | EntryFlowBlock
              | EntryWrapped
              | string
              | number
          )[];
          bonus?: {
              name: string;
              entries: (
                  | EntrySection
                  | EntryEntries
                  | EntryQuote
                  | EntryInlineEntries
                  | EntryEntriesInlineEntries
                  | EntryOptions
                  | EntryTableGroup
                  | EntryTable
                  | EntryTableRow
                  | EntryTableCell
                  | EntryList
                  | EntryBonus
                  | EntryBonusSpeed
                  | EntryDice
                  | EntryAbilityDc
                  | EntryAbilityAttackMod
                  | AbilityGeneric
                  | EntryLink
                  | EntryOptFeature
                  | EntryInset
                  | EntryInsetReadaloud
                  | EntryVariant
                  | EntryVariantInner
                  | EntryVariantSub
                  | EntryItem
                  | EntryItemSub
                  | EntryItemSpell
                  | EntryImage
                  | EntryGallery
                  | EntryActions
                  | EntryAttack
                  | EntryDataCreature
                  | EntryDataSpell
                  | EntryDataTrapHazard
                  | EntryDataObject
                  | EntryDataItem
                  | EntryStatblock
                  | EntryRefClassFeature
                  | EntryRefSubclassFeature
                  | EntryRefOptionalfeature
                  | EntryHr
                  | EntrySpellcasting
                  | EntryFlowchart
                  | EntryFlowBlock
                  | EntryWrapped
                  | string
                  | number
              )[];
          }[];
          reactionNote?: string;
          reactionHeader?: (
              | EntrySection
              | EntryEntries
              | EntryQuote
              | EntryInlineEntries
              | EntryEntriesInlineEntries
              | EntryOptions
              | EntryTableGroup
              | EntryTable
              | EntryTableRow
              | EntryTableCell
              | EntryList
              | EntryBonus
              | EntryBonusSpeed
              | EntryDice
              | EntryAbilityDc
              | EntryAbilityAttackMod
              | AbilityGeneric
              | EntryLink
              | EntryOptFeature
              | EntryInset
              | EntryInsetReadaloud
              | EntryVariant
              | EntryVariantInner
              | EntryVariantSub
              | EntryItem
              | EntryItemSub
              | EntryItemSpell
              | EntryImage
              | EntryGallery
              | EntryActions
              | EntryAttack
              | EntryDataCreature
              | EntryDataSpell
              | EntryDataTrapHazard
              | EntryDataObject
              | EntryDataItem
              | EntryStatblock
              | EntryRefClassFeature
              | EntryRefSubclassFeature
              | EntryRefOptionalfeature
              | EntryHr
              | EntrySpellcasting
              | EntryFlowchart
              | EntryFlowBlock
              | EntryWrapped
              | string
              | number
          )[];
          reaction?: {
              name: string;
              entries: (
                  | EntrySection
                  | EntryEntries
                  | EntryQuote
                  | EntryInlineEntries
                  | EntryEntriesInlineEntries
                  | EntryOptions
                  | EntryTableGroup
                  | EntryTable
                  | EntryTableRow
                  | EntryTableCell
                  | EntryList
                  | EntryBonus
                  | EntryBonusSpeed
                  | EntryDice
                  | EntryAbilityDc
                  | EntryAbilityAttackMod
                  | AbilityGeneric
                  | EntryLink
                  | EntryOptFeature
                  | EntryInset
                  | EntryInsetReadaloud
                  | EntryVariant
                  | EntryVariantInner
                  | EntryVariantSub
                  | EntryItem
                  | EntryItemSub
                  | EntryItemSpell
                  | EntryImage
                  | EntryGallery
                  | EntryActions
                  | EntryAttack
                  | EntryDataCreature
                  | EntryDataSpell
                  | EntryDataTrapHazard
                  | EntryDataObject
                  | EntryDataItem
                  | EntryStatblock
                  | EntryRefClassFeature
                  | EntryRefSubclassFeature
                  | EntryRefOptionalfeature
                  | EntryHr
                  | EntrySpellcasting
                  | EntryFlowchart
                  | EntryFlowBlock
                  | EntryWrapped
                  | string
                  | number
              )[];
          }[];
          legendaryGroup?: {
              name?: string;
              source?: string;
              [k: string]: unknown;
          };
          legendaryActions?: number;
          legendaryHeader?: (
              | EntrySection
              | EntryEntries
              | EntryQuote
              | EntryInlineEntries
              | EntryEntriesInlineEntries
              | EntryOptions
              | EntryTableGroup
              | EntryTable
              | EntryTableRow
              | EntryTableCell
              | EntryList
              | EntryBonus
              | EntryBonusSpeed
              | EntryDice
              | EntryAbilityDc
              | EntryAbilityAttackMod
              | AbilityGeneric
              | EntryLink
              | EntryOptFeature
              | EntryInset
              | EntryInsetReadaloud
              | EntryVariant
              | EntryVariantInner
              | EntryVariantSub
              | EntryItem
              | EntryItemSub
              | EntryItemSpell
              | EntryImage
              | EntryGallery
              | EntryActions
              | EntryAttack
              | EntryDataCreature
              | EntryDataSpell
              | EntryDataTrapHazard
              | EntryDataObject
              | EntryDataItem
              | EntryStatblock
              | EntryRefClassFeature
              | EntryRefSubclassFeature
              | EntryRefOptionalfeature
              | EntryHr
              | EntrySpellcasting
              | EntryFlowchart
              | EntryFlowBlock
              | EntryWrapped
              | string
              | number
          )[];
          legendary?:
              | {
                    name?: string;
                    entries: (
                        | EntrySection
                        | EntryEntries
                        | EntryQuote
                        | EntryInlineEntries
                        | EntryEntriesInlineEntries
                        | EntryOptions
                        | EntryTableGroup
                        | EntryTable
                        | EntryTableRow
                        | EntryTableCell
                        | EntryList
                        | EntryBonus
                        | EntryBonusSpeed
                        | EntryDice
                        | EntryAbilityDc
                        | EntryAbilityAttackMod
                        | AbilityGeneric
                        | EntryLink
                        | EntryOptFeature
                        | EntryInset
                        | EntryInsetReadaloud
                        | EntryVariant
                        | EntryVariantInner
                        | EntryVariantSub
                        | EntryItem
                        | EntryItemSub
                        | EntryItemSpell
                        | EntryImage
                        | EntryGallery
                        | EntryActions
                        | EntryAttack
                        | EntryDataCreature
                        | EntryDataSpell
                        | EntryDataTrapHazard
                        | EntryDataObject
                        | EntryDataItem
                        | EntryStatblock
                        | EntryRefClassFeature
                        | EntryRefSubclassFeature
                        | EntryRefOptionalfeature
                        | EntryHr
                        | EntrySpellcasting
                        | EntryFlowchart
                        | EntryFlowBlock
                        | EntryWrapped
                        | string
                        | number
                    )[];
                }[]
              | null;
          mythicHeader?: (
              | EntrySection
              | EntryEntries
              | EntryQuote
              | EntryInlineEntries
              | EntryEntriesInlineEntries
              | EntryOptions
              | EntryTableGroup
              | EntryTable
              | EntryTableRow
              | EntryTableCell
              | EntryList
              | EntryBonus
              | EntryBonusSpeed
              | EntryDice
              | EntryAbilityDc
              | EntryAbilityAttackMod
              | AbilityGeneric
              | EntryLink
              | EntryOptFeature
              | EntryInset
              | EntryInsetReadaloud
              | EntryVariant
              | EntryVariantInner
              | EntryVariantSub
              | EntryItem
              | EntryItemSub
              | EntryItemSpell
              | EntryImage
              | EntryGallery
              | EntryActions
              | EntryAttack
              | EntryDataCreature
              | EntryDataSpell
              | EntryDataTrapHazard
              | EntryDataObject
              | EntryDataItem
              | EntryStatblock
              | EntryRefClassFeature
              | EntryRefSubclassFeature
              | EntryRefOptionalfeature
              | EntryHr
              | EntrySpellcasting
              | EntryFlowchart
              | EntryFlowBlock
              | EntryWrapped
              | string
              | number
          )[];
          mythic?: {
              name?: string;
              entries: (
                  | EntrySection
                  | EntryEntries
                  | EntryQuote
                  | EntryInlineEntries
                  | EntryEntriesInlineEntries
                  | EntryOptions
                  | EntryTableGroup
                  | EntryTable
                  | EntryTableRow
                  | EntryTableCell
                  | EntryList
                  | EntryBonus
                  | EntryBonusSpeed
                  | EntryDice
                  | EntryAbilityDc
                  | EntryAbilityAttackMod
                  | AbilityGeneric
                  | EntryLink
                  | EntryOptFeature
                  | EntryInset
                  | EntryInsetReadaloud
                  | EntryVariant
                  | EntryVariantInner
                  | EntryVariantSub
                  | EntryItem
                  | EntryItemSub
                  | EntryItemSpell
                  | EntryImage
                  | EntryGallery
                  | EntryActions
                  | EntryAttack
                  | EntryDataCreature
                  | EntryDataSpell
                  | EntryDataTrapHazard
                  | EntryDataObject
                  | EntryDataItem
                  | EntryStatblock
                  | EntryRefClassFeature
                  | EntryRefSubclassFeature
                  | EntryRefOptionalfeature
                  | EntryHr
                  | EntrySpellcasting
                  | EntryFlowchart
                  | EntryFlowBlock
                  | EntryWrapped
                  | string
                  | number
              )[];
          }[];
          variant?: EntryVariantBestiary[];
          page?: Page;
          familiar?: boolean;
          additionalSources?: AdditionalSources;
          hasToken?: boolean;
          tokenUrl?: string;
          altArt?: {
              name: string;
              source: string;
              page?: Page;
              [k: string]: unknown;
          }[];
          isNamedCreature?: boolean;
          /**
           * Used to flag adventure NPCs
           */
          isNpc?: boolean;
          environment?: (
              | "underwater"
              | "coastal"
              | "mountain"
              | "grassland"
              | "hill"
              | "arctic"
              | "urban"
              | "forest"
              | "swamp"
              | "underdark"
              | "desert"
          )[];
          soundClip?: MediaHref;
          dragonCastingColor?:
              | "black"
              | "blue"
              | "green"
              | "red"
              | "white"
              | "brass"
              | "bronze"
              | "copper"
              | "gold"
              | "silver"
              | "deep";
          dragonAge?:
              | "young"
              | "adult"
              | "wyrmling"
              | "greatwyrm"
              | "ancient"
              | "aspect";
          traitTags?: (
              | "Aggressive"
              | "Ambusher"
              | "Amorphous"
              | "Amphibious"
              | "Antimagic Susceptibility"
              | "Brute"
              | "Charge"
              | "Damage Absorption"
              | "Death Burst"
              | "Devil's Sight"
              | "False Appearance"
              | "Fey Ancestry"
              | "Flyby"
              | "Hold Breath"
              | "Illumination"
              | "Immutable Form"
              | "Incorporeal Movement"
              | "Keen Senses"
              | "Legendary Resistances"
              | "Light Sensitivity"
              | "Magic Resistance"
              | "Magic Weapons"
              | "Pack Tactics"
              | "Pounce"
              | "Rampage"
              | "Reckless"
              | "Regeneration"
              | "Rejuvenation"
              | "Shapechanger"
              | "Siege Monster"
              | "Sneak Attack"
              | "Spell Immunity"
              | "Spider Climb"
              | "Sunlight Sensitivity"
              | "Tree Stride"
              | "Turn Immunity"
              | "Turn Resistance"
              | "Undead Fortitude"
              | "Unusual Nature"
              | "Water Breathing"
              | "Web Sense"
              | "Web Walker"
          )[];
          actionTags?: (
              | "Breath Weapon"
              | "Frightful Presence"
              | "Multiattack"
              | "Parry"
              | "Shapechanger"
              | "Swallow"
              | "Teleport"
              | "Tentacles"
          )[];
          languageTags?: (
              | "AB"
              | "AQ"
              | "AU"
              | "C"
              | "CE"
              | "CS"
              | "D"
              | "DR"
              | "DS"
              | "DU"
              | "E"
              | "G"
              | "GI"
              | "GO"
              | "GTH"
              | "H"
              | "I"
              | "IG"
              | "LF"
              | "O"
              | "OTH"
              | "P"
              | "S"
              | "T"
              | "TC"
              | "TP"
              | "U"
              | "X"
              | "XX"
          )[];
          senseTags?: ("B" | "D" | "SD" | "T" | "U")[];
          spellcastingTags?: (
              | "P"
              | "I"
              | "F"
              | "S"
              | "O"
              | "CA"
              | "CB"
              | "CC"
              | "CD"
              | "CP"
              | "CR"
              | "CS"
              | "CL"
              | "CW"
          )[];
          damageTags?: DataDamageTags[];
          damageTagsSpell?: DataDamageTags[];
          damageTagsLegendary?: DataDamageTags[];
          miscTags?: ("AOE" | "HPR" | "MW" | "RW" | "RCH" | "RNG" | "THW")[];
          conditionInflict?: TagsConditions;
          conditionInflictLegendary?: TagsConditions;
          conditionInflictSpell?: TagsConditions;
          /**
           * Intended for homebrew use only.
           */
          footer?: (
              | EntrySection
              | EntryEntries
              | EntryQuote
              | EntryInlineEntries
              | EntryEntriesInlineEntries
              | EntryOptions
              | EntryTableGroup
              | EntryTable
              | EntryTableRow
              | EntryTableCell
              | EntryList
              | EntryBonus
              | EntryBonusSpeed
              | EntryDice
              | EntryAbilityDc
              | EntryAbilityAttackMod
              | AbilityGeneric
              | EntryLink
              | EntryOptFeature
              | EntryInset
              | EntryInsetReadaloud
              | EntryVariant
              | EntryVariantInner
              | EntryVariantSub
              | EntryItem
              | EntryItemSub
              | EntryItemSpell
              | EntryImage
              | EntryGallery
              | EntryActions
              | EntryAttack
              | EntryDataCreature
              | EntryDataSpell
              | EntryDataTrapHazard
              | EntryDataObject
              | EntryDataItem
              | EntryStatblock
              | EntryRefClassFeature
              | EntryRefSubclassFeature
              | EntryRefOptionalfeature
              | EntryHr
              | EntrySpellcasting
              | EntryFlowchart
              | EntryFlowBlock
              | EntryWrapped
              | string
              | number
          )[];
          srd?: Srd;
          basicRules?: BasicRules;
          /**
           * The spell used to summon this creature; specifically for TCE-esque summon spells.
           */
          summonedBySpell?: string;
          /**
           * The level of the spell used to summon this creature; specifically for TCE-esque summon spells.
           */
          summonedBySpellLevel?: number;
          /**
           * The class which can summon this creature; e.g. for those granted by some TCE class features.
           */
          summonedByClass?: string;
          /**
           * An internal flag indicating this creature is a copy of another, and is a temporary/placeholder entry which will be factored out using the "_copy" format at a later date.
           */
          _isCopy?: boolean;
          _versions?: CreatureVersion[];
          hasFluff?: boolean;
          hasFluffImages?: boolean;
      }
    | {
          name?: string;
          /**
           * Used anywhere a shortened form of the creatures name is required (e.g. in legendary action headers).
           * If not supplied, a shortened name will be automatically generated from the creature's full name.
           * Alternatively use "true" if the "shortName" should be an exact copy of the creature's "name".
           */
          shortName?: string | boolean;
          alias?: string[];
          /**
           * A group name, indexed by search. E.g. searching "Lycanthrope" would otherwise fail to find anything.
           * Only works on the bestiary page, not in the full site search.
           */
          group?: null | string[];
          /**
           * Used in sidekicks, which can have levels (and generally do not have alignment)
           */
          level?: number;
          size?: Size[];
          sizeNote?: string;
          type?:
              | {
                    type: CreatureType;
                    /**
                     * Size of the individual creatures that make up the swarm.
                     */
                    swarmSize?:
                        | "F"
                        | "D"
                        | "T"
                        | "S"
                        | "M"
                        | "L"
                        | "H"
                        | "G"
                        | "C"
                        | "V";
                    tags?: (
                        | string
                        | {
                              tag: string;
                              prefix: string;
                          }
                    )[];
                }
              | CreatureType;
          source?: string;
          /**
           * Sub-source text that is shown when hovered.
           */
          sourceSub?: string;
          otherSources?: OtherSources;
          reprintedAs?: ReprintedAs;
          alignment?: Align[];
          alignmentPrefix?: string;
          ac?: AcItem[];
          hp?:
              | {
                    average: number;
                    formula: string;
                }
              | {
                    special?: string;
                };
          speed?: Speed;
          str?: number | null;
          dex?: number | null;
          con?: number | null;
          int?: number | null;
          wis?: number | null;
          cha?: number | null;
          save?: {
              str?: string;
              dex?: string;
              con?: string;
              int?: string;
              wis?: string;
              cha?: string;
          };
          skill?: {
              acrobatics?: string;
              "animal handling"?: string;
              arcana?: string;
              athletics?: string;
              deception?: string;
              history?: string;
              insight?: string;
              intimidation?: string;
              investigation?: string;
              medicine?: string;
              nature?: string;
              perception?: string;
              performance?: string;
              persuasion?: string;
              religion?: string;
              "sleight of hand"?: string;
              stealth?: string;
              survival?: string;
              other?: {
                  oneOf?: {
                      acrobatics?: string;
                      "animal handling"?: string;
                      arcana?: string;
                      athletics?: string;
                      deception?: string;
                      history?: string;
                      insight?: string;
                      intimidation?: string;
                      investigation?: string;
                      medicine?: string;
                      nature?: string;
                      perception?: string;
                      performance?: string;
                      persuasion?: string;
                      religion?: string;
                      "sleight of hand"?: string;
                      stealth?: string;
                      survival?: string;
                  };
                  [k: string]: unknown;
              }[];
          };
          senses?: string[] | null;
          passive?: number | string | null;
          languages?: string[] | null;
          pbNote?: string;
          cr?:
              | string
              | {
                    cr: string;
                    lair?: string;
                    coven?: string;
                    xp?: number;
                };
          vulnerable?: DamageVulnerabilityArray;
          resist?: DamageResistArray;
          immune?: DamageImmunityArray;
          conditionImmune?: ConditionImmunityArray;
          spellcasting?: EntrySpellcasting[] | null;
          trait?:
              | {
                    name: string;
                    entries: (
                        | EntrySection
                        | EntryEntries
                        | EntryQuote
                        | EntryInlineEntries
                        | EntryEntriesInlineEntries
                        | EntryOptions
                        | EntryTableGroup
                        | EntryTable
                        | EntryTableRow
                        | EntryTableCell
                        | EntryList
                        | EntryBonus
                        | EntryBonusSpeed
                        | EntryDice
                        | EntryAbilityDc
                        | EntryAbilityAttackMod
                        | AbilityGeneric
                        | EntryLink
                        | EntryOptFeature
                        | EntryInset
                        | EntryInsetReadaloud
                        | EntryVariant
                        | EntryVariantInner
                        | EntryVariantSub
                        | EntryItem
                        | EntryItemSub
                        | EntryItemSpell
                        | EntryImage
                        | EntryGallery
                        | EntryActions
                        | EntryAttack
                        | EntryDataCreature
                        | EntryDataSpell
                        | EntryDataTrapHazard
                        | EntryDataObject
                        | EntryDataItem
                        | EntryStatblock
                        | EntryRefClassFeature
                        | EntryRefSubclassFeature
                        | EntryRefOptionalfeature
                        | EntryHr
                        | EntrySpellcasting
                        | EntryFlowchart
                        | EntryFlowBlock
                        | EntryWrapped
                        | string
                        | number
                    )[];
                    type?: "entries" | "inset";
                    /**
                     * Forces a sort order. Traits with sort orders will always be arranged before those without.
                     */
                    sort?: number;
                }[]
              | null;
          actionNote?: string;
          actionHeader?: (
              | EntrySection
              | EntryEntries
              | EntryQuote
              | EntryInlineEntries
              | EntryEntriesInlineEntries
              | EntryOptions
              | EntryTableGroup
              | EntryTable
              | EntryTableRow
              | EntryTableCell
              | EntryList
              | EntryBonus
              | EntryBonusSpeed
              | EntryDice
              | EntryAbilityDc
              | EntryAbilityAttackMod
              | AbilityGeneric
              | EntryLink
              | EntryOptFeature
              | EntryInset
              | EntryInsetReadaloud
              | EntryVariant
              | EntryVariantInner
              | EntryVariantSub
              | EntryItem
              | EntryItemSub
              | EntryItemSpell
              | EntryImage
              | EntryGallery
              | EntryActions
              | EntryAttack
              | EntryDataCreature
              | EntryDataSpell
              | EntryDataTrapHazard
              | EntryDataObject
              | EntryDataItem
              | EntryStatblock
              | EntryRefClassFeature
              | EntryRefSubclassFeature
              | EntryRefOptionalfeature
              | EntryHr
              | EntrySpellcasting
              | EntryFlowchart
              | EntryFlowBlock
              | EntryWrapped
              | string
              | number
          )[];
          action?:
              | {
                    name: string;
                    entries: (
                        | EntrySection
                        | EntryEntries
                        | EntryQuote
                        | EntryInlineEntries
                        | EntryEntriesInlineEntries
                        | EntryOptions
                        | EntryTableGroup
                        | EntryTable
                        | EntryTableRow
                        | EntryTableCell
                        | EntryList
                        | EntryBonus
                        | EntryBonusSpeed
                        | EntryDice
                        | EntryAbilityDc
                        | EntryAbilityAttackMod
                        | AbilityGeneric
                        | EntryLink
                        | EntryOptFeature
                        | EntryInset
                        | EntryInsetReadaloud
                        | EntryVariant
                        | EntryVariantInner
                        | EntryVariantSub
                        | EntryItem
                        | EntryItemSub
                        | EntryItemSpell
                        | EntryImage
                        | EntryGallery
                        | EntryActions
                        | EntryAttack
                        | EntryDataCreature
                        | EntryDataSpell
                        | EntryDataTrapHazard
                        | EntryDataObject
                        | EntryDataItem
                        | EntryStatblock
                        | EntryRefClassFeature
                        | EntryRefSubclassFeature
                        | EntryRefOptionalfeature
                        | EntryHr
                        | EntrySpellcasting
                        | EntryFlowchart
                        | EntryFlowBlock
                        | EntryWrapped
                        | string
                        | number
                    )[];
                }[]
              | null;
          bonusNote?: string;
          bonusHeader?: (
              | EntrySection
              | EntryEntries
              | EntryQuote
              | EntryInlineEntries
              | EntryEntriesInlineEntries
              | EntryOptions
              | EntryTableGroup
              | EntryTable
              | EntryTableRow
              | EntryTableCell
              | EntryList
              | EntryBonus
              | EntryBonusSpeed
              | EntryDice
              | EntryAbilityDc
              | EntryAbilityAttackMod
              | AbilityGeneric
              | EntryLink
              | EntryOptFeature
              | EntryInset
              | EntryInsetReadaloud
              | EntryVariant
              | EntryVariantInner
              | EntryVariantSub
              | EntryItem
              | EntryItemSub
              | EntryItemSpell
              | EntryImage
              | EntryGallery
              | EntryActions
              | EntryAttack
              | EntryDataCreature
              | EntryDataSpell
              | EntryDataTrapHazard
              | EntryDataObject
              | EntryDataItem
              | EntryStatblock
              | EntryRefClassFeature
              | EntryRefSubclassFeature
              | EntryRefOptionalfeature
              | EntryHr
              | EntrySpellcasting
              | EntryFlowchart
              | EntryFlowBlock
              | EntryWrapped
              | string
              | number
          )[];
          bonus?: {
              name: string;
              entries: (
                  | EntrySection
                  | EntryEntries
                  | EntryQuote
                  | EntryInlineEntries
                  | EntryEntriesInlineEntries
                  | EntryOptions
                  | EntryTableGroup
                  | EntryTable
                  | EntryTableRow
                  | EntryTableCell
                  | EntryList
                  | EntryBonus
                  | EntryBonusSpeed
                  | EntryDice
                  | EntryAbilityDc
                  | EntryAbilityAttackMod
                  | AbilityGeneric
                  | EntryLink
                  | EntryOptFeature
                  | EntryInset
                  | EntryInsetReadaloud
                  | EntryVariant
                  | EntryVariantInner
                  | EntryVariantSub
                  | EntryItem
                  | EntryItemSub
                  | EntryItemSpell
                  | EntryImage
                  | EntryGallery
                  | EntryActions
                  | EntryAttack
                  | EntryDataCreature
                  | EntryDataSpell
                  | EntryDataTrapHazard
                  | EntryDataObject
                  | EntryDataItem
                  | EntryStatblock
                  | EntryRefClassFeature
                  | EntryRefSubclassFeature
                  | EntryRefOptionalfeature
                  | EntryHr
                  | EntrySpellcasting
                  | EntryFlowchart
                  | EntryFlowBlock
                  | EntryWrapped
                  | string
                  | number
              )[];
          }[];
          reactionNote?: string;
          reactionHeader?: (
              | EntrySection
              | EntryEntries
              | EntryQuote
              | EntryInlineEntries
              | EntryEntriesInlineEntries
              | EntryOptions
              | EntryTableGroup
              | EntryTable
              | EntryTableRow
              | EntryTableCell
              | EntryList
              | EntryBonus
              | EntryBonusSpeed
              | EntryDice
              | EntryAbilityDc
              | EntryAbilityAttackMod
              | AbilityGeneric
              | EntryLink
              | EntryOptFeature
              | EntryInset
              | EntryInsetReadaloud
              | EntryVariant
              | EntryVariantInner
              | EntryVariantSub
              | EntryItem
              | EntryItemSub
              | EntryItemSpell
              | EntryImage
              | EntryGallery
              | EntryActions
              | EntryAttack
              | EntryDataCreature
              | EntryDataSpell
              | EntryDataTrapHazard
              | EntryDataObject
              | EntryDataItem
              | EntryStatblock
              | EntryRefClassFeature
              | EntryRefSubclassFeature
              | EntryRefOptionalfeature
              | EntryHr
              | EntrySpellcasting
              | EntryFlowchart
              | EntryFlowBlock
              | EntryWrapped
              | string
              | number
          )[];
          reaction?: {
              name: string;
              entries: (
                  | EntrySection
                  | EntryEntries
                  | EntryQuote
                  | EntryInlineEntries
                  | EntryEntriesInlineEntries
                  | EntryOptions
                  | EntryTableGroup
                  | EntryTable
                  | EntryTableRow
                  | EntryTableCell
                  | EntryList
                  | EntryBonus
                  | EntryBonusSpeed
                  | EntryDice
                  | EntryAbilityDc
                  | EntryAbilityAttackMod
                  | AbilityGeneric
                  | EntryLink
                  | EntryOptFeature
                  | EntryInset
                  | EntryInsetReadaloud
                  | EntryVariant
                  | EntryVariantInner
                  | EntryVariantSub
                  | EntryItem
                  | EntryItemSub
                  | EntryItemSpell
                  | EntryImage
                  | EntryGallery
                  | EntryActions
                  | EntryAttack
                  | EntryDataCreature
                  | EntryDataSpell
                  | EntryDataTrapHazard
                  | EntryDataObject
                  | EntryDataItem
                  | EntryStatblock
                  | EntryRefClassFeature
                  | EntryRefSubclassFeature
                  | EntryRefOptionalfeature
                  | EntryHr
                  | EntrySpellcasting
                  | EntryFlowchart
                  | EntryFlowBlock
                  | EntryWrapped
                  | string
                  | number
              )[];
          }[];
          legendaryGroup?: {
              name?: string;
              source?: string;
              [k: string]: unknown;
          };
          legendaryActions?: number;
          legendaryHeader?: (
              | EntrySection
              | EntryEntries
              | EntryQuote
              | EntryInlineEntries
              | EntryEntriesInlineEntries
              | EntryOptions
              | EntryTableGroup
              | EntryTable
              | EntryTableRow
              | EntryTableCell
              | EntryList
              | EntryBonus
              | EntryBonusSpeed
              | EntryDice
              | EntryAbilityDc
              | EntryAbilityAttackMod
              | AbilityGeneric
              | EntryLink
              | EntryOptFeature
              | EntryInset
              | EntryInsetReadaloud
              | EntryVariant
              | EntryVariantInner
              | EntryVariantSub
              | EntryItem
              | EntryItemSub
              | EntryItemSpell
              | EntryImage
              | EntryGallery
              | EntryActions
              | EntryAttack
              | EntryDataCreature
              | EntryDataSpell
              | EntryDataTrapHazard
              | EntryDataObject
              | EntryDataItem
              | EntryStatblock
              | EntryRefClassFeature
              | EntryRefSubclassFeature
              | EntryRefOptionalfeature
              | EntryHr
              | EntrySpellcasting
              | EntryFlowchart
              | EntryFlowBlock
              | EntryWrapped
              | string
              | number
          )[];
          legendary?:
              | {
                    name?: string;
                    entries: (
                        | EntrySection
                        | EntryEntries
                        | EntryQuote
                        | EntryInlineEntries
                        | EntryEntriesInlineEntries
                        | EntryOptions
                        | EntryTableGroup
                        | EntryTable
                        | EntryTableRow
                        | EntryTableCell
                        | EntryList
                        | EntryBonus
                        | EntryBonusSpeed
                        | EntryDice
                        | EntryAbilityDc
                        | EntryAbilityAttackMod
                        | AbilityGeneric
                        | EntryLink
                        | EntryOptFeature
                        | EntryInset
                        | EntryInsetReadaloud
                        | EntryVariant
                        | EntryVariantInner
                        | EntryVariantSub
                        | EntryItem
                        | EntryItemSub
                        | EntryItemSpell
                        | EntryImage
                        | EntryGallery
                        | EntryActions
                        | EntryAttack
                        | EntryDataCreature
                        | EntryDataSpell
                        | EntryDataTrapHazard
                        | EntryDataObject
                        | EntryDataItem
                        | EntryStatblock
                        | EntryRefClassFeature
                        | EntryRefSubclassFeature
                        | EntryRefOptionalfeature
                        | EntryHr
                        | EntrySpellcasting
                        | EntryFlowchart
                        | EntryFlowBlock
                        | EntryWrapped
                        | string
                        | number
                    )[];
                }[]
              | null;
          mythicHeader?: (
              | EntrySection
              | EntryEntries
              | EntryQuote
              | EntryInlineEntries
              | EntryEntriesInlineEntries
              | EntryOptions
              | EntryTableGroup
              | EntryTable
              | EntryTableRow
              | EntryTableCell
              | EntryList
              | EntryBonus
              | EntryBonusSpeed
              | EntryDice
              | EntryAbilityDc
              | EntryAbilityAttackMod
              | AbilityGeneric
              | EntryLink
              | EntryOptFeature
              | EntryInset
              | EntryInsetReadaloud
              | EntryVariant
              | EntryVariantInner
              | EntryVariantSub
              | EntryItem
              | EntryItemSub
              | EntryItemSpell
              | EntryImage
              | EntryGallery
              | EntryActions
              | EntryAttack
              | EntryDataCreature
              | EntryDataSpell
              | EntryDataTrapHazard
              | EntryDataObject
              | EntryDataItem
              | EntryStatblock
              | EntryRefClassFeature
              | EntryRefSubclassFeature
              | EntryRefOptionalfeature
              | EntryHr
              | EntrySpellcasting
              | EntryFlowchart
              | EntryFlowBlock
              | EntryWrapped
              | string
              | number
          )[];
          mythic?: {
              name?: string;
              entries: (
                  | EntrySection
                  | EntryEntries
                  | EntryQuote
                  | EntryInlineEntries
                  | EntryEntriesInlineEntries
                  | EntryOptions
                  | EntryTableGroup
                  | EntryTable
                  | EntryTableRow
                  | EntryTableCell
                  | EntryList
                  | EntryBonus
                  | EntryBonusSpeed
                  | EntryDice
                  | EntryAbilityDc
                  | EntryAbilityAttackMod
                  | AbilityGeneric
                  | EntryLink
                  | EntryOptFeature
                  | EntryInset
                  | EntryInsetReadaloud
                  | EntryVariant
                  | EntryVariantInner
                  | EntryVariantSub
                  | EntryItem
                  | EntryItemSub
                  | EntryItemSpell
                  | EntryImage
                  | EntryGallery
                  | EntryActions
                  | EntryAttack
                  | EntryDataCreature
                  | EntryDataSpell
                  | EntryDataTrapHazard
                  | EntryDataObject
                  | EntryDataItem
                  | EntryStatblock
                  | EntryRefClassFeature
                  | EntryRefSubclassFeature
                  | EntryRefOptionalfeature
                  | EntryHr
                  | EntrySpellcasting
                  | EntryFlowchart
                  | EntryFlowBlock
                  | EntryWrapped
                  | string
                  | number
              )[];
          }[];
          variant?: EntryVariantBestiary[];
          page?: Page;
          familiar?: boolean;
          additionalSources?: AdditionalSources;
          hasToken?: boolean;
          tokenUrl?: string;
          altArt?: {
              name: string;
              source: string;
              page?: Page;
              [k: string]: unknown;
          }[];
          isNamedCreature?: boolean;
          /**
           * Used to flag adventure NPCs
           */
          isNpc?: boolean;
          environment?: (
              | "underwater"
              | "coastal"
              | "mountain"
              | "grassland"
              | "hill"
              | "arctic"
              | "urban"
              | "forest"
              | "swamp"
              | "underdark"
              | "desert"
          )[];
          soundClip?: MediaHref;
          dragonCastingColor?:
              | "black"
              | "blue"
              | "green"
              | "red"
              | "white"
              | "brass"
              | "bronze"
              | "copper"
              | "gold"
              | "silver"
              | "deep";
          dragonAge?:
              | "young"
              | "adult"
              | "wyrmling"
              | "greatwyrm"
              | "ancient"
              | "aspect";
          traitTags?: (
              | "Aggressive"
              | "Ambusher"
              | "Amorphous"
              | "Amphibious"
              | "Antimagic Susceptibility"
              | "Brute"
              | "Charge"
              | "Damage Absorption"
              | "Death Burst"
              | "Devil's Sight"
              | "False Appearance"
              | "Fey Ancestry"
              | "Flyby"
              | "Hold Breath"
              | "Illumination"
              | "Immutable Form"
              | "Incorporeal Movement"
              | "Keen Senses"
              | "Legendary Resistances"
              | "Light Sensitivity"
              | "Magic Resistance"
              | "Magic Weapons"
              | "Pack Tactics"
              | "Pounce"
              | "Rampage"
              | "Reckless"
              | "Regeneration"
              | "Rejuvenation"
              | "Shapechanger"
              | "Siege Monster"
              | "Sneak Attack"
              | "Spell Immunity"
              | "Spider Climb"
              | "Sunlight Sensitivity"
              | "Tree Stride"
              | "Turn Immunity"
              | "Turn Resistance"
              | "Undead Fortitude"
              | "Unusual Nature"
              | "Water Breathing"
              | "Web Sense"
              | "Web Walker"
          )[];
          actionTags?: (
              | "Breath Weapon"
              | "Frightful Presence"
              | "Multiattack"
              | "Parry"
              | "Shapechanger"
              | "Swallow"
              | "Teleport"
              | "Tentacles"
          )[];
          languageTags?: (
              | "AB"
              | "AQ"
              | "AU"
              | "C"
              | "CE"
              | "CS"
              | "D"
              | "DR"
              | "DS"
              | "DU"
              | "E"
              | "G"
              | "GI"
              | "GO"
              | "GTH"
              | "H"
              | "I"
              | "IG"
              | "LF"
              | "O"
              | "OTH"
              | "P"
              | "S"
              | "T"
              | "TC"
              | "TP"
              | "U"
              | "X"
              | "XX"
          )[];
          senseTags?: ("B" | "D" | "SD" | "T" | "U")[];
          spellcastingTags?: (
              | "P"
              | "I"
              | "F"
              | "S"
              | "O"
              | "CA"
              | "CB"
              | "CC"
              | "CD"
              | "CP"
              | "CR"
              | "CS"
              | "CL"
              | "CW"
          )[];
          damageTags?: DataDamageTags[];
          damageTagsSpell?: DataDamageTags[];
          damageTagsLegendary?: DataDamageTags[];
          miscTags?: ("AOE" | "HPR" | "MW" | "RW" | "RCH" | "RNG" | "THW")[];
          conditionInflict?: TagsConditions;
          conditionInflictLegendary?: TagsConditions;
          conditionInflictSpell?: TagsConditions;
          /**
           * Intended for homebrew use only.
           */
          footer?: (
              | EntrySection
              | EntryEntries
              | EntryQuote
              | EntryInlineEntries
              | EntryEntriesInlineEntries
              | EntryOptions
              | EntryTableGroup
              | EntryTable
              | EntryTableRow
              | EntryTableCell
              | EntryList
              | EntryBonus
              | EntryBonusSpeed
              | EntryDice
              | EntryAbilityDc
              | EntryAbilityAttackMod
              | AbilityGeneric
              | EntryLink
              | EntryOptFeature
              | EntryInset
              | EntryInsetReadaloud
              | EntryVariant
              | EntryVariantInner
              | EntryVariantSub
              | EntryItem
              | EntryItemSub
              | EntryItemSpell
              | EntryImage
              | EntryGallery
              | EntryActions
              | EntryAttack
              | EntryDataCreature
              | EntryDataSpell
              | EntryDataTrapHazard
              | EntryDataObject
              | EntryDataItem
              | EntryStatblock
              | EntryRefClassFeature
              | EntryRefSubclassFeature
              | EntryRefOptionalfeature
              | EntryHr
              | EntrySpellcasting
              | EntryFlowchart
              | EntryFlowBlock
              | EntryWrapped
              | string
              | number
          )[];
          srd?: Srd;
          basicRules?: BasicRules;
          /**
           * The spell used to summon this creature; specifically for TCE-esque summon spells.
           */
          summonedBySpell?: string;
          /**
           * The level of the spell used to summon this creature; specifically for TCE-esque summon spells.
           */
          summonedBySpellLevel?: number;
          /**
           * The class which can summon this creature; e.g. for those granted by some TCE class features.
           */
          summonedByClass?: string;
          /**
           * An internal flag indicating this creature is a copy of another, and is a temporary/placeholder entry which will be factored out using the "_copy" format at a later date.
           */
          _isCopy?: boolean;
          _versions?: CreatureVersion[];
          hasFluff?: boolean;
          hasFluffImages?: boolean;
          _copy: {
              name: string;
              source: string;
              /**
               * Used in deity data
               */
              pantheon?: string;
              /**
               * Used in subclass data
               */
              shortName?: string;
              /**
               * Used in subclass data
               */
              className?: string;
              /**
               * Used in subclass data
               */
              classSource?: string;
              _mod?: _ModObject;
              _trait?: {
                  name: string;
                  source: string;
                  [k: string]: unknown;
              };
              _preserve?: {
                  /**
                   * This interface was referenced by `undefined`'s JSON-Schema definition
                   * via the `patternProperty` ".*".
                   */
                  [k: string]: boolean;
              };
          };
      };
/**
 * F: Fine
 *  D: Diminutive
 *  T: Tiny
 *  S: Small
 *  M: Medium
 *  L: Large
 *  H: Huge
 *  G: Gargantuan
 *  C: Colossal
 *  V: Varies.
 */
export type Size = "F" | "D" | "T" | "S" | "M" | "L" | "H" | "G" | "C" | "V";
export type CreatureType =
    | "aberration"
    | "beast"
    | "celestial"
    | "construct"
    | "dragon"
    | "elemental"
    | "fey"
    | "fiend"
    | "giant"
    | "humanoid"
    | "monstrosity"
    | "ooze"
    | "plant"
    | "undead";
export type Page = number;
export type OtherSources = {
    source: string;
    page?: Page;
}[];
export type ReprintedAs = (
    | string
    | {
          /**
           * A UID, e.g. "longsword|phb"
           */
          uid: string;
          /**
           * A tag used in the renderer, e.g. "creature"
           */
          tag: string;
      }
)[];
export type Align =
    | Alignment
    | {
          alignment: Alignment[];
          chance?: number;
          note?: string;
      }
    | {
          special: string;
      };
/**
 * L: Lawful
 *  N: Neutral
 *  NX: Neutral (law/chaos axis)
 *  NY: Neutral (good/evil axis)
 *  C: Chaotic
 *  G: Good
 *  E: Evil
 *  U: Unaligned
 *  A: Any
 */
export type Alignment = "L" | "N" | "NX" | "NY" | "C" | "G" | "E" | "U" | "A";
export type AcItem =
    | {
          ac: number;
          from?: string[];
          condition?: string;
          braces?: boolean;
      }
    | {
          special: string;
      }
    | number;
export type Speed =
    | {
          walk?: _SpeedVal;
          burrow?: _SpeedVal;
          climb?: _SpeedVal;
          fly?: _SpeedVal;
          canHover?: boolean;
          swim?: _SpeedVal;
          choose?: {
              from: ("walk" | "burrow" | "climb" | "fly" | "swim")[];
              amount: number;
              note?: string;
          };
          alternate?: {
              walk?: _SpeedVal[];
              burrow?: _SpeedVal[];
              climb?: _SpeedVal[];
              fly?: _SpeedVal[];
              swim?: _SpeedVal[];
              [k: string]: unknown;
          };
      }
    | number;
export type _SpeedVal =
    | {
          number: number;
          condition: string;
      }
    | number;
export type DamageVulnerabilityArray =
    | (
          | DataDamageType
          | {
                special: string;
            }
          | {
                preNote?: string;
                vulnerable: DamageVulnerabilityArray;
                note?: string;
                cond?: boolean;
            }
      )[]
    | null;
export type DataDamageType =
    | "acid"
    | "bludgeoning"
    | "cold"
    | "fire"
    | "force"
    | "lightning"
    | "necrotic"
    | "piercing"
    | "poison"
    | "psychic"
    | "radiant"
    | "slashing"
    | "thunder";
export type DamageResistArray =
    | (
          | DataDamageType
          | {
                special: string;
            }
          | {
                preNote?: string;
                resist: DamageResistArray;
                note?: string;
                cond?: boolean;
            }
      )[]
    | null;
export type DamageImmunityArray =
    | (
          | DataDamageType
          | {
                special: string;
            }
          | {
                preNote?: string;
                immune: DamageImmunityArray;
                note?: string;
                cond?: boolean;
            }
      )[]
    | null;
export type ConditionImmunityArray =
    | (
          | DataCondition
          | {
                special: string;
            }
          | {
                preNote?: string;
                conditionImmune: ConditionImmunityArray;
                note?: string;
            }
      )[]
    | null;
export type DataCondition =
    | "blinded"
    | "charmed"
    | "deafened"
    | "exhaustion"
    | "frightened"
    | "grappled"
    | "incapacitated"
    | "invisible"
    | "paralyzed"
    | "petrified"
    | "poisoned"
    | "prone"
    | "restrained"
    | "stunned"
    | "unconscious"
    | "disease";
export type Srd = boolean | string;
export type BasicRules = boolean;
export type _ArrayOfSpell = (
    | string
    | {
          entry: string;
          hidden: boolean;
          [k: string]: unknown;
      }
)[];
export type EntryItem =
    | {
          name?: string;
          type: string;
          source?: string;
          page?: Page;
          srd?: Srd;
          basicRules?: BasicRules;
          /**
           * A generic object for storing special data for external use-cases. Keys prefixed with "rd-" should be added as "data-" HTML attributes when rendering to HTML.
           */
          data?: {
              [k: string]: unknown;
          };
          id?: string;
          style?: string;
          entry: BestiarySchema;
          nameDot?: {
              [k: string]: unknown;
          };
      }
    | {
          name?: string;
          type: string;
          source?: string;
          page?: Page;
          srd?: Srd;
          basicRules?: BasicRules;
          /**
           * A generic object for storing special data for external use-cases. Keys prefixed with "rd-" should be added as "data-" HTML attributes when rendering to HTML.
           */
          data?: {
              [k: string]: unknown;
          };
          id?: string;
          style?: string;
          entries: BestiarySchema[];
          nameDot?: {
              [k: string]: unknown;
          };
      };
export type MediaHref =
    | {
          type?: {
              [k: string]: unknown;
          };
          path: string;
      }
    | {
          type?: {
              [k: string]: unknown;
          };
          url: string;
      };
export type AThumbnailImageUsedInRareCasesEGWhenLoadingAWallOfMapsToChooseFromInTheDMScreen =

        | {
              type?: {
                  [k: string]: unknown;
              };
              path: string;
          }
        | {
              type?: {
                  [k: string]: unknown;
              };
              url: string;
          };
export type _EntryDataStyle = "inset";
export type Spell =
    | {
          name: string;
          level: number;
          school: "A" | "V" | "E" | "I" | "D" | "N" | "T" | "C" | "P";
          meta?: {
              ritual?: boolean;
              technomagic?: boolean;
          };
          time: Time[];
          range: {
              type:
                  | "special"
                  | "point"
                  | "line"
                  | "cube"
                  | "cone"
                  | "radius"
                  | "sphere"
                  | "hemisphere"
                  | "cylinder";
              distance?: {
                  type:
                      | "feet"
                      | "miles"
                      | "self"
                      | "touch"
                      | "unlimited"
                      | "plane"
                      | "sight";
                  amount?: number;
              };
          };
          components?: {
              v?: boolean;
              s?: boolean;
              m?:
                  | {
                        text: string;
                        /**
                         * In copper pieces.
                         */
                        cost?: number;
                        consume?: boolean | string;
                    }
                  | (boolean | string);
              /**
               * "Royalty" components, as introduced in Acquisitions Incorporated
               */
              r?: boolean;
          };
          duration: Duration[];
          entries: (
              | EntrySection
              | EntryEntries
              | EntryQuote
              | EntryInlineEntries
              | EntryEntriesInlineEntries
              | EntryOptions
              | EntryTableGroup
              | EntryTable
              | EntryTableRow
              | EntryTableCell
              | EntryList
              | EntryBonus
              | EntryBonusSpeed
              | EntryDice
              | EntryAbilityDc
              | EntryAbilityAttackMod
              | AbilityGeneric
              | EntryLink
              | EntryOptFeature
              | EntryInset
              | EntryInsetReadaloud
              | EntryVariant
              | EntryVariantInner
              | EntryVariantSub
              | EntryItem
              | EntryItemSub
              | EntryItemSpell
              | EntryImage
              | EntryGallery
              | EntryActions
              | EntryAttack
              | EntryDataCreature
              | EntryDataSpell
              | EntryDataTrapHazard
              | EntryDataObject
              | EntryDataItem
              | EntryStatblock
              | EntryRefClassFeature
              | EntryRefSubclassFeature
              | EntryRefOptionalfeature
              | EntryHr
              | EntrySpellcasting
              | EntryFlowchart
              | EntryFlowBlock
              | EntryWrapped
              | string
              | number
          )[];
          entriesHigherLevel?: (
              | EntrySection
              | EntryEntries
              | EntryQuote
              | EntryInlineEntries
              | EntryEntriesInlineEntries
              | EntryOptions
              | EntryTableGroup
              | EntryTable
              | EntryTableRow
              | EntryTableCell
              | EntryList
              | EntryBonus
              | EntryBonusSpeed
              | EntryDice
              | EntryAbilityDc
              | EntryAbilityAttackMod
              | AbilityGeneric
              | EntryLink
              | EntryOptFeature
              | EntryInset
              | EntryInsetReadaloud
              | EntryVariant
              | EntryVariantInner
              | EntryVariantSub
              | EntryItem
              | EntryItemSub
              | EntryItemSpell
              | EntryImage
              | EntryGallery
              | EntryActions
              | EntryAttack
              | EntryDataCreature
              | EntryDataSpell
              | EntryDataTrapHazard
              | EntryDataObject
              | EntryDataItem
              | EntryStatblock
              | EntryRefClassFeature
              | EntryRefSubclassFeature
              | EntryRefOptionalfeature
              | EntryHr
              | EntrySpellcasting
              | EntryFlowchart
              | EntryFlowBlock
              | EntryWrapped
              | string
              | number
          )[];
          classes?: {
              fromClassList?: Class[];
              fromClassListVariant?: Class[];
              fromSubclass?: {
                  class: Class;
                  subclass: {
                      name: string;
                      source: string;
                      subSubclass?: string;
                  };
              }[];
          };
          races?: {
              name: string;
              source: string;
              baseName?: string;
              baseSource?: string;
              [k: string]: unknown;
          }[];
          backgrounds?: {
              name: string;
              source: string;
              [k: string]: unknown;
          }[];
          eldritchInvocations?: {
              name: string;
              source: string;
              [k: string]: unknown;
          }[];
          source: string;
          page?: Page;
          additionalSources?: AdditionalSources;
          otherSources?: OtherSources;
          damageInflict?: DataDamageType[];
          damageResist?: DataDamageType[];
          damageImmune?: DataDamageType[];
          damageVulnerable?: DataDamageType[];
          conditionInflict?: TagsConditions;
          conditionImmune?: TagsConditions;
          savingThrow?: (
              | "strength"
              | "constitution"
              | "dexterity"
              | "intelligence"
              | "wisdom"
              | "charisma"
          )[];
          abilityCheck?: (
              | "strength"
              | "constitution"
              | "dexterity"
              | "intelligence"
              | "wisdom"
              | "charisma"
          )[];
          spellAttack?: ("M" | "R" | "O")[];
          /**
           * By convention, only the effects of the spell cast at its base level are considered when populating these.
           *  C: Cube
           *  H: Hemisphere
           *  L: Line
           *  MT: Multiple Targets
           *  N: Cone
           *  Q: Square
           *  R: Circle
           *  ST: Single Target
           *  S: Sphere
           *  W: Wall
           *  Y: Cylinder
           */
          areaTags?: (
              | "ST"
              | "MT"
              | "R"
              | "N"
              | "C"
              | "Y"
              | "H"
              | "L"
              | "S"
              | "Q"
              | "W"
          )[];
          /**
           * FMV: Forced Movement
           *  HL: Healing
           *  LGT: Creates Light
           *  LGTS: Creates Sunlight
           *  MAC: Modifies AC
           *  PRM: Permanent Effects
           *  RO: Rollable Effects
           *  SCL: Scaling Effects
           *   SMN: Summons Creature
           *  SGT: Requires Sight
           *  THP: Grants Temporary Hit Points
           *  TP: Teleportation
           */
          miscTags?: (
              | "FMV"
              | "HL"
              | "LGT"
              | "LGTS"
              | "MAC"
              | "PRM"
              | "RO"
              | "SCL"
              | "SMN"
              | "SGT"
              | "THP"
              | "TP"
          )[];
          affectsCreatureType?: CreatureType[];
          srd?: Srd;
          basicRules?: BasicRules;
          scalingLevelDice?: ScalingLevelDiceItem[] | ScalingLevelDiceItem;
          hasFluff?: boolean;
          hasFluffImages?: boolean;
      }
    | {
          name?: string;
          level?: number;
          school?: "A" | "V" | "E" | "I" | "D" | "N" | "T" | "C" | "P";
          meta?: {
              ritual?: boolean;
              technomagic?: boolean;
          };
          time?: Time[];
          range?: {
              type:
                  | "special"
                  | "point"
                  | "line"
                  | "cube"
                  | "cone"
                  | "radius"
                  | "sphere"
                  | "hemisphere"
                  | "cylinder";
              distance?: {
                  type:
                      | "feet"
                      | "miles"
                      | "self"
                      | "touch"
                      | "unlimited"
                      | "plane"
                      | "sight";
                  amount?: number;
              };
          };
          components?: {
              v?: boolean;
              s?: boolean;
              m?:
                  | {
                        text: string;
                        /**
                         * In copper pieces.
                         */
                        cost?: number;
                        consume?: boolean | string;
                    }
                  | (boolean | string);
              /**
               * "Royalty" components, as introduced in Acquisitions Incorporated
               */
              r?: boolean;
          };
          duration?: Duration[];
          entries?: (
              | EntrySection
              | EntryEntries
              | EntryQuote
              | EntryInlineEntries
              | EntryEntriesInlineEntries
              | EntryOptions
              | EntryTableGroup
              | EntryTable
              | EntryTableRow
              | EntryTableCell
              | EntryList
              | EntryBonus
              | EntryBonusSpeed
              | EntryDice
              | EntryAbilityDc
              | EntryAbilityAttackMod
              | AbilityGeneric
              | EntryLink
              | EntryOptFeature
              | EntryInset
              | EntryInsetReadaloud
              | EntryVariant
              | EntryVariantInner
              | EntryVariantSub
              | EntryItem
              | EntryItemSub
              | EntryItemSpell
              | EntryImage
              | EntryGallery
              | EntryActions
              | EntryAttack
              | EntryDataCreature
              | EntryDataSpell
              | EntryDataTrapHazard
              | EntryDataObject
              | EntryDataItem
              | EntryStatblock
              | EntryRefClassFeature
              | EntryRefSubclassFeature
              | EntryRefOptionalfeature
              | EntryHr
              | EntrySpellcasting
              | EntryFlowchart
              | EntryFlowBlock
              | EntryWrapped
              | string
              | number
          )[];
          entriesHigherLevel?: (
              | EntrySection
              | EntryEntries
              | EntryQuote
              | EntryInlineEntries
              | EntryEntriesInlineEntries
              | EntryOptions
              | EntryTableGroup
              | EntryTable
              | EntryTableRow
              | EntryTableCell
              | EntryList
              | EntryBonus
              | EntryBonusSpeed
              | EntryDice
              | EntryAbilityDc
              | EntryAbilityAttackMod
              | AbilityGeneric
              | EntryLink
              | EntryOptFeature
              | EntryInset
              | EntryInsetReadaloud
              | EntryVariant
              | EntryVariantInner
              | EntryVariantSub
              | EntryItem
              | EntryItemSub
              | EntryItemSpell
              | EntryImage
              | EntryGallery
              | EntryActions
              | EntryAttack
              | EntryDataCreature
              | EntryDataSpell
              | EntryDataTrapHazard
              | EntryDataObject
              | EntryDataItem
              | EntryStatblock
              | EntryRefClassFeature
              | EntryRefSubclassFeature
              | EntryRefOptionalfeature
              | EntryHr
              | EntrySpellcasting
              | EntryFlowchart
              | EntryFlowBlock
              | EntryWrapped
              | string
              | number
          )[];
          classes?: {
              fromClassList?: Class[];
              fromClassListVariant?: Class[];
              fromSubclass?: {
                  class: Class;
                  subclass: {
                      name: string;
                      source: string;
                      subSubclass?: string;
                  };
              }[];
          };
          races?: {
              name: string;
              source: string;
              baseName?: string;
              baseSource?: string;
              [k: string]: unknown;
          }[];
          backgrounds?: {
              name: string;
              source: string;
              [k: string]: unknown;
          }[];
          eldritchInvocations?: {
              name: string;
              source: string;
              [k: string]: unknown;
          }[];
          source?: string;
          page?: Page;
          additionalSources?: AdditionalSources;
          otherSources?: OtherSources;
          damageInflict?: DataDamageType[];
          damageResist?: DataDamageType[];
          damageImmune?: DataDamageType[];
          damageVulnerable?: DataDamageType[];
          conditionInflict?: TagsConditions;
          conditionImmune?: TagsConditions;
          savingThrow?: (
              | "strength"
              | "constitution"
              | "dexterity"
              | "intelligence"
              | "wisdom"
              | "charisma"
          )[];
          abilityCheck?: (
              | "strength"
              | "constitution"
              | "dexterity"
              | "intelligence"
              | "wisdom"
              | "charisma"
          )[];
          spellAttack?: ("M" | "R" | "O")[];
          /**
           * By convention, only the effects of the spell cast at its base level are considered when populating these.
           *  C: Cube
           *  H: Hemisphere
           *  L: Line
           *  MT: Multiple Targets
           *  N: Cone
           *  Q: Square
           *  R: Circle
           *  ST: Single Target
           *  S: Sphere
           *  W: Wall
           *  Y: Cylinder
           */
          areaTags?: (
              | "ST"
              | "MT"
              | "R"
              | "N"
              | "C"
              | "Y"
              | "H"
              | "L"
              | "S"
              | "Q"
              | "W"
          )[];
          /**
           * FMV: Forced Movement
           *  HL: Healing
           *  LGT: Creates Light
           *  LGTS: Creates Sunlight
           *  MAC: Modifies AC
           *  PRM: Permanent Effects
           *  RO: Rollable Effects
           *  SCL: Scaling Effects
           *   SMN: Summons Creature
           *  SGT: Requires Sight
           *  THP: Grants Temporary Hit Points
           *  TP: Teleportation
           */
          miscTags?: (
              | "FMV"
              | "HL"
              | "LGT"
              | "LGTS"
              | "MAC"
              | "PRM"
              | "RO"
              | "SCL"
              | "SMN"
              | "SGT"
              | "THP"
              | "TP"
          )[];
          affectsCreatureType?: CreatureType[];
          srd?: Srd;
          basicRules?: BasicRules;
          scalingLevelDice?: ScalingLevelDiceItem[] | ScalingLevelDiceItem;
          hasFluff?: boolean;
          hasFluffImages?: boolean;
          _copy: {
              name: string;
              source: string;
              /**
               * Used in deity data
               */
              pantheon?: string;
              /**
               * Used in subclass data
               */
              shortName?: string;
              /**
               * Used in subclass data
               */
              className?: string;
              /**
               * Used in subclass data
               */
              classSource?: string;
              _mod?: _ModObject;
              _trait?: {
                  name: string;
                  source: string;
                  [k: string]: unknown;
              };
              _preserve?: {
                  /**
                   * This interface was referenced by `undefined`'s JSON-Schema definition
                   * via the `patternProperty` ".*".
                   */
                  [k: string]: boolean;
              };
          };
      };
export type EntryStatblock =
    | {
          name: string;
          type: string;
          source?: string;
          page?: Page;
          srd?: Srd;
          basicRules?: BasicRules;
          /**
           * A generic object for storing special data for external use-cases. Keys prefixed with "rd-" should be added as "data-" HTML attributes when rendering to HTML.
           */
          data?: {
              [k: string]: unknown;
          };
          id?: string;
          tag: TagNameStats;
          displayName?: string;
          hash?: string;
          style?: _EntryDataStyle;
      }
    | {
          name: string;
          type: string;
          source: string;
          page?: Page;
          srd?: Srd;
          basicRules?: BasicRules;
          /**
           * A generic object for storing special data for external use-cases. Keys prefixed with "rd-" should be added as "data-" HTML attributes when rendering to HTML.
           */
          data?: {
              [k: string]: unknown;
          };
          id?: string;
          prop: PropNameStats;
          displayName?: string;
          hash?: string;
          style?: _EntryDataStyle;
          [k: string]: unknown;
      };
export type TagNameStats =
    | "spell"
    | "item"
    | "creature"
    | "condition"
    | "disease"
    | "status"
    | "background"
    | "race"
    | "optfeature"
    | "reward"
    | "feat"
    | "psionic"
    | "object"
    | "cult"
    | "boon"
    | "trap"
    | "hazard"
    | "deity"
    | "variantrule"
    | "charoption"
    | "vehicle"
    | "vehupgrade"
    | "class"
    | "action"
    | "language"
    | "classFeature"
    | "subclassFeature"
    | "table"
    | "recipe"
    | "skill"
    | "sense";
export type PropNameStats = "subclass";
export type AdditionalSources = {
    source: string;
    page?: Page;
}[];
export type TagsConditions = (
    | "blinded"
    | "charmed"
    | "deafened"
    | "exhaustion"
    | "frightened"
    | "grappled"
    | "incapacitated"
    | "invisible"
    | "paralyzed"
    | "petrified"
    | "poisoned"
    | "prone"
    | "restrained"
    | "stunned"
    | "unconscious"
)[];
export type CopyModifier =
    | {
          mode?: {
              [k: string]: unknown;
          };
          replace: string;
          with: string;
          flags?: string;
          /**
           * If unspecified, defaults to `[null, "entries", "headerEntries", "footerEntries"]`. To apply to _any_ string, including those outside of sub-properties (for instance, when trying to replace text in an array of plain strings), include `null` as one of the props (i.e. `"props": [null]`)
           */
          props?: (string | null)[];
      }
    | {
          mode?: {
              [k: string]: unknown;
          };
          replace: string;
          with: string;
          flags?: string;
      }
    | {
          mode?: {
              [k: string]: unknown;
          };
          str: string;
          joiner?: string;
      }
    | {
          mode?: {
              [k: string]: unknown;
          };
          items:
              | string
              | {
                    [k: string]: unknown;
                }
              | unknown[];
      }
    | {
          mode?: {
              [k: string]: unknown;
          };
          items:
              | string
              | {
                    [k: string]: unknown;
                }
              | unknown[];
      }
    | {
          mode?: {
              [k: string]: unknown;
          };
          items:
              | string
              | {
                    [k: string]: unknown;
                }
              | unknown[];
      }
    | {
          mode?: {
              [k: string]: unknown;
          };
          replace:
              | string
              | {
                    index: number;
                }
              | {
                    regex: string;
                    flags?: string;
                };
          items:
              | {
                    [k: string]: unknown;
                }
              | unknown[];
      }
    | {
          mode?: {
              [k: string]: unknown;
          };
          replace:
              | string
              | {
                    index: number;
                }
              | {
                    regex: string;
                    flags?: string;
                };
          items:
              | {
                    [k: string]: unknown;
                }
              | unknown[];
      }
    | {
          mode?: {
              [k: string]: unknown;
          };
          index: number;
          items:
              | {
                    [k: string]: unknown;
                }
              | string
              | unknown[];
      }
    | {
          mode?: {
              [k: string]: unknown;
          };
          names?: string | unknown[];
          items?: string | unknown[];
          force?: boolean;
      }
    | {
          mode?: {
              [k: string]: unknown;
          };
          prop: string;
          formula: string;
      }
    | {
          mode: {
              [k: string]: unknown;
          };
          spells?: {
              [k: string]: unknown;
          };
          daily?: {
              [k: string]: unknown;
          };
      }
    | {
          mode: {
              [k: string]: unknown;
          };
          spells?: {
              [k: string]: unknown;
          };
          daily?: {
              [k: string]: unknown;
          };
      }
    | {
          mode: {
              [k: string]: unknown;
          };
          spells?: {
              [k: string]: unknown;
          };
          will?: unknown[];
          daily?: {
              [k: string]: unknown;
          };
          weekly?: {
              [k: string]: unknown;
          };
          yearly?: {
              [k: string]: unknown;
          };
      }
    | {
          mode: {
              [k: string]: unknown;
          };
          skills: {
              [k: string]: unknown;
          };
      }
    | {
          mode: {
              [k: string]: unknown;
          };
          saves: {
              [k: string]: unknown;
          };
      }
    | {
          mode: {
              [k: string]: unknown;
          };
          skills: number;
      }
    | {
          mode: {
              [k: string]: unknown;
          };
          saves: number;
      }
    | {
          mode: {
              [k: string]: unknown;
          };
          senses:
              | {
                    [k: string]: unknown;
                }
              | unknown[];
      }
    | {
          mode: {
              [k: string]: unknown;
          };
          prop: string;
          scalar: number;
      }
    | {
          mode: {
              [k: string]: unknown;
          };
          prop: string;
          scalar: number;
          floor?: boolean;
      }
    | {
          mode: {
              [k: string]: unknown;
          };
          scalar: number;
      }
    | {
          mode: {
              [k: string]: unknown;
          };
          scalar: number;
      }
    | {
          mode: {
              [k: string]: unknown;
          };
          max: string;
      }
    | {
          mode: {
              [k: string]: unknown;
          };
          scalar: number;
          floor?: boolean;
      };
export type EntryVariantBestiary =
    | {
          name: string;
          type: string;
          source?: string;
          page?: Page;
          srd?: Srd;
          basicRules?: BasicRules;
          /**
           * A generic object for storing special data for external use-cases. Keys prefixed with "rd-" should be added as "data-" HTML attributes when rendering to HTML.
           */
          data?: {
              [k: string]: unknown;
          };
          id?: string;
          entries: (
              | EntrySection
              | EntryEntries
              | EntryQuote
              | EntryInlineEntries
              | EntryEntriesInlineEntries
              | EntryOptions
              | EntryTableGroup
              | EntryTable
              | EntryTableRow
              | EntryTableCell
              | EntryList
              | EntryBonus
              | EntryBonusSpeed
              | EntryDice
              | EntryAbilityDc
              | EntryAbilityAttackMod
              | AbilityGeneric
              | EntryLink
              | EntryOptFeature
              | EntryInset
              | EntryInsetReadaloud
              | EntryVariant
              | EntryVariantInner
              | EntryVariantSub
              | EntryItem
              | EntryItemSub
              | EntryItemSpell
              | EntryImage
              | EntryGallery
              | EntryActions
              | EntryAttack
              | EntryDataCreature
              | EntryDataSpell
              | EntryDataTrapHazard
              | EntryDataObject
              | EntryDataItem
              | EntryStatblock
              | EntryRefClassFeature
              | EntryRefSubclassFeature
              | EntryRefOptionalfeature
              | EntryHr
              | EntrySpellcasting
              | EntryFlowchart
              | EntryFlowBlock
              | EntryWrapped
              | string
              | number
          )[];
          token?: {
              name: string;
              source: string;
              page?: Page;
              [k: string]: unknown;
          };
          _version?:
              | {
                    name?: string;
                    source?: string;
                    addAs: string;
                }
              | {
                    name?: string;
                    source?: string;
                    addHeadersAs: string;
                };
      }
    | {
          name?: string;
          type: string;
          source?: string;
          page?: Page;
          srd?: Srd;
          basicRules?: BasicRules;
          /**
           * A generic object for storing special data for external use-cases. Keys prefixed with "rd-" should be added as "data-" HTML attributes when rendering to HTML.
           */
          data?: {
              [k: string]: unknown;
          };
          id?: string;
          entries: (
              | EntrySection
              | EntryEntries
              | EntryQuote
              | EntryInlineEntries
              | EntryEntriesInlineEntries
              | EntryOptions
              | EntryTableGroup
              | EntryTable
              | EntryTableRow
              | EntryTableCell
              | EntryList
              | EntryBonus
              | EntryBonusSpeed
              | EntryDice
              | EntryAbilityDc
              | EntryAbilityAttackMod
              | AbilityGeneric
              | EntryLink
              | EntryOptFeature
              | EntryInset
              | EntryInsetReadaloud
              | EntryVariant
              | EntryVariantInner
              | EntryVariantSub
              | EntryItem
              | EntryItemSub
              | EntryItemSpell
              | EntryImage
              | EntryGallery
              | EntryActions
              | EntryAttack
              | EntryDataCreature
              | EntryDataSpell
              | EntryDataTrapHazard
              | EntryDataObject
              | EntryDataItem
              | EntryStatblock
              | EntryRefClassFeature
              | EntryRefSubclassFeature
              | EntryRefOptionalfeature
              | EntryHr
              | EntrySpellcasting
              | EntryFlowchart
              | EntryFlowBlock
              | EntryWrapped
              | string
              | number
          )[];
          style?: string;
          token?: {
              name: string;
              source: string;
              page?: Page;
              [k: string]: unknown;
          };
          _version?:
              | {
                    name?: string;
                    source?: string;
                    addAs: string;
                }
              | {
                    name?: string;
                    source?: string;
                    addHeadersAs: string;
                };
      };
/**
 * A: Acid
 *  B: Bludgeoning
 *  C: Cold
 *  F: Fire
 *  O: Force
 *  L: Lightning
 *  N: Necrotic
 *  P: Piercing
 *  I: Poison
 *  Y: Psychic
 *  R: Radiant
 *  S: Slashing
 *  T: Thunder
 */
export type DataDamageTags =
    | "A"
    | "B"
    | "C"
    | "F"
    | "O"
    | "L"
    | "N"
    | "P"
    | "I"
    | "Y"
    | "R"
    | "S"
    | "T";
export type CreatureVersion = Version | CreatureData;
export type Version =
    | {
          name: string;
          source: string;
          _mod?: _ModObject;
          [k: string]: unknown;
      }
    | {
          _template: {
              name: string;
              source: string;
              _mod: _ModObject;
              [k: string]: unknown;
          };
          _implementations: {
              _variables: {
                  [k: string]: unknown;
              };
              [k: string]: unknown;
          }[];
          [k: string]: unknown;
      };

export interface BestiarySchema {
    monster?: Creature[];
    _meta?: MetaBlock;
}
export interface EntrySpellcasting {
    name: string;
    type: string;
    source?: string;
    page?: Page;
    srd?: Srd;
    basicRules?: BasicRules;
    /**
     * A generic object for storing special data for external use-cases. Keys prefixed with "rd-" should be added as "data-" HTML attributes when rendering to HTML.
     */
    data?: {
        [k: string]: unknown;
    };
    id?: string;
    headerEntries?: BestiarySchema[];
    constant?: _ArrayOfSpell;
    will?: _ArrayOfSpell;
    ritual?: _ArrayOfSpell;
    rest?: EntrySpellcastingFrequency;
    daily?: EntrySpellcastingFrequency;
    weekly?: EntrySpellcastingFrequency;
    yearly?: EntrySpellcastingFrequency;
    charges?: EntrySpellcastingFrequency;
    spells?: {
        "0"?: {
            spells: string[];
        };
        "1"?: EntrySpellcastingLevel1To9;
        "2"?: EntrySpellcastingLevel1To9;
        "3"?: EntrySpellcastingLevel1To9;
        "4"?: EntrySpellcastingLevel1To9;
        "5"?: EntrySpellcastingLevel1To9;
        "6"?: EntrySpellcastingLevel1To9;
        "7"?: EntrySpellcastingLevel1To9;
        "8"?: EntrySpellcastingLevel1To9;
        "9"?: EntrySpellcastingLevel1To9;
    };
    /**
     * Allows the above properties to be specified, but not rendered. Useful if e.g. a creature can only cast one spell, and this is rendered in the header line.
     */
    hidden?: (
        | "constant"
        | "will"
        | "rest"
        | "daily"
        | "weekly"
        | "yearly"
        | "ritual"
        | "spells"
    )[];
    footerEntries?: string[];
    ability?: "str" | "dex" | "con" | "int" | "wis" | "cha";
    /**
     * Implicitly "trait"
     */
    displayAs?: "trait" | "action";
    /**
     * The UID of an item which provides the charges required to cast any "charges" spells.
     */
    chargesItem?: string;
}
export interface EntrySpellcastingFrequency {
    "1"?: _ArrayOfSpell;
    "2"?: _ArrayOfSpell;
    "3"?: _ArrayOfSpell;
    "4"?: _ArrayOfSpell;
    "5"?: _ArrayOfSpell;
    "6"?: _ArrayOfSpell;
    "7"?: _ArrayOfSpell;
    "8"?: _ArrayOfSpell;
    "9"?: _ArrayOfSpell;
    "9e"?: _ArrayOfSpell;
    "8e"?: _ArrayOfSpell;
    "7e"?: _ArrayOfSpell;
    "6e"?: _ArrayOfSpell;
    "5e"?: _ArrayOfSpell;
    "4e"?: _ArrayOfSpell;
    "3e"?: _ArrayOfSpell;
    "2e"?: _ArrayOfSpell;
    "1e"?: _ArrayOfSpell;
}
export interface EntrySpellcastingLevel1To9 {
    lower?: number;
    slots?: number;
    spells: string[];
}
export interface EntrySection {
    name?: string;
    type: string;
    source?: string;
    page?: Page;
    srd?: Srd;
    basicRules?: BasicRules;
    /**
     * A generic object for storing special data for external use-cases. Keys prefixed with "rd-" should be added as "data-" HTML attributes when rendering to HTML.
     */
    data?: {
        [k: string]: unknown;
    };
    id?: string;
    alias?: string[];
    entries: BestiarySchema[];
    style?: string;
}
export interface EntryEntries {
    name?: string;
    type: string;
    source?: string;
    page?: Page;
    srd?: Srd;
    basicRules?: BasicRules;
    /**
     * A generic object for storing special data for external use-cases. Keys prefixed with "rd-" should be added as "data-" HTML attributes when rendering to HTML.
     */
    data?: {
        [k: string]: unknown;
    };
    id?: string;
    entries: BestiarySchema[];
    alias?: string[];
    style?: string;
}
export interface EntryQuote {
    name?: string;
    type: string;
    source?: string;
    page?: Page;
    srd?: Srd;
    basicRules?: BasicRules;
    /**
     * A generic object for storing special data for external use-cases. Keys prefixed with "rd-" should be added as "data-" HTML attributes when rendering to HTML.
     */
    data?: {
        [k: string]: unknown;
    };
    id?: string;
    entries: BestiarySchema[];
    by?: string;
    from?: string;
    /**
     * If the automatically-inserted quotation marks should be skipped.
     */
    skipMarks?: boolean;
    skipItalics?: boolean;
}
export interface EntryInlineEntries {
    name?: string;
    type: string;
    source?: string;
    page?: Page;
    srd?: Srd;
    basicRules?: BasicRules;
    /**
     * A generic object for storing special data for external use-cases. Keys prefixed with "rd-" should be added as "data-" HTML attributes when rendering to HTML.
     */
    data?: {
        [k: string]: unknown;
    };
    id?: string;
    entries: BestiarySchema[];
}
export interface EntryEntriesInlineEntries {
    name?: string;
    type: string;
    source?: string;
    page?: Page;
    srd?: Srd;
    basicRules?: BasicRules;
    /**
     * A generic object for storing special data for external use-cases. Keys prefixed with "rd-" should be added as "data-" HTML attributes when rendering to HTML.
     */
    data?: {
        [k: string]: unknown;
    };
    id?: string;
    entries: BestiarySchema[];
}
export interface EntryOptions {
    name?: string;
    type: string;
    source?: string;
    page?: Page;
    srd?: Srd;
    basicRules?: BasicRules;
    /**
     * A generic object for storing special data for external use-cases. Keys prefixed with "rd-" should be added as "data-" HTML attributes when rendering to HTML.
     */
    data?: {
        [k: string]: unknown;
    };
    id?: string;
    /**
     * Used to specify how many of the listed options can be chosen as e.g. permanent character features. Leave blank for transient choices.
     */
    count?: number;
    style?: string;
    entries: BestiarySchema[];
}
/**
 * Used to group related tables together; has no effect on rendering.
 */
export interface EntryTableGroup {
    name?: string;
    type: string;
    source?: string;
    page?: Page;
    srd?: Srd;
    basicRules?: BasicRules;
    /**
     * A generic object for storing special data for external use-cases. Keys prefixed with "rd-" should be added as "data-" HTML attributes when rendering to HTML.
     */
    data?: {
        [k: string]: unknown;
    };
    id?: string;
    tables: EntryTable[];
}
export interface EntryTable {
    name?: string;
    type: string;
    source?: string;
    page?: Page;
    srd?: Srd;
    basicRules?: BasicRules;
    /**
     * A generic object for storing special data for external use-cases. Keys prefixed with "rd-" should be added as "data-" HTML attributes when rendering to HTML.
     */
    data?: {
        [k: string]: unknown;
    };
    id?: string;
    caption?: string;
    isStriped?: boolean;
    /**
     * Uses the result rolled to construct a name from multiple columns, such as Prefix, Given, Family, Suffix names etc.
     */
    isNameGenerator?: boolean;
    style?: string;
    colLabels?: string[];
    colStyles?: string[];
    rowLabels?: string[];
    rowStyles?: string[];
    rows: (BestiarySchema[] | EntryTableRow)[];
    footnotes?: BestiarySchema[];
}
export interface EntryTableRow {
    name?: string;
    type: string;
    source?: string;
    page?: Page;
    srd?: Srd;
    basicRules?: BasicRules;
    /**
     * A generic object for storing special data for external use-cases. Keys prefixed with "rd-" should be added as "data-" HTML attributes when rendering to HTML.
     */
    data?: {
        [k: string]: unknown;
    };
    id?: string;
    style?: string;
    row: BestiarySchema[];
}
export interface EntryTableCell {
    name?: string;
    type: string;
    source?: string;
    page?: Page;
    srd?: Srd;
    basicRules?: BasicRules;
    /**
     * A generic object for storing special data for external use-cases. Keys prefixed with "rd-" should be added as "data-" HTML attributes when rendering to HTML.
     */
    data?: {
        [k: string]: unknown;
    };
    id?: string;
    width?: number;
    roll?:
        | {
              min: number;
              max: number;
              pad?: boolean;
          }
        | {
              exact: number;
              pad?: boolean;
          };
    entry?: BestiarySchema;
}
export interface EntryList {
    name?: string;
    type: string;
    source?: string;
    page?: Page;
    srd?: Srd;
    basicRules?: BasicRules;
    /**
     * A generic object for storing special data for external use-cases. Keys prefixed with "rd-" should be added as "data-" HTML attributes when rendering to HTML.
     */
    data?: {
        [k: string]: unknown;
    };
    id?: string;
    /**
     * Number of columns the content should be split into. Note that the full value is only displayed on wide screens, and screens below certain widths will see an appropriately reduced number of columns.
     */
    columns?: number;
    /**
     * Formatting to be applied to the list; not providing a style results in a simple bullet point list.
     *  list-decimal: decimal numbering 1. 2. 3. etc
     *  list-hang: a list with the bullets removed and a full indentation
     *  list-hang-notitle: a list with no bullets that indents all lines but the first
     *  list-lower-roman: lowercase roman numeral numbering i, ii, iii, iv, etc.
     *  list-name: a bulleted list with all text in bold
     *  list-no-bullets: a list with the bullets removed and reduced indentation
     */
    style?:
        | "list-decimal"
        | "list-hang"
        | "list-hang-notitle"
        | "list-lower-roman"
        | "list-name"
        | "list-no-bullets";
    items: BestiarySchema[];
}
export interface EntryBonus {
    name?: string;
    type: string;
    source?: string;
    page?: Page;
    srd?: Srd;
    basicRules?: BasicRules;
    /**
     * A generic object for storing special data for external use-cases. Keys prefixed with "rd-" should be added as "data-" HTML attributes when rendering to HTML.
     */
    data?: {
        [k: string]: unknown;
    };
    id?: string;
    value: number;
}
export interface EntryBonusSpeed {
    name?: string;
    type: string;
    source?: string;
    page?: Page;
    srd?: Srd;
    basicRules?: BasicRules;
    /**
     * A generic object for storing special data for external use-cases. Keys prefixed with "rd-" should be added as "data-" HTML attributes when rendering to HTML.
     */
    data?: {
        [k: string]: unknown;
    };
    id?: string;
    value: number;
}
export interface EntryDice {
    name?: string;
    type: string;
    source?: string;
    page?: Page;
    srd?: Srd;
    basicRules?: BasicRules;
    /**
     * A generic object for storing special data for external use-cases. Keys prefixed with "rd-" should be added as "data-" HTML attributes when rendering to HTML.
     */
    data?: {
        [k: string]: unknown;
    };
    id?: string;
    toRoll?: {
        number: number;
        faces: number;
        /**
         * (Warning: unused)
         */
        modifier?: number;
        /**
         * (Warning: unused)
         */
        hideModifier?: boolean;
        [k: string]: unknown;
    }[];
    rollable?: boolean;
}
export interface EntryAbilityDc {
    name: string;
    type: string;
    source?: string;
    page?: Page;
    srd?: Srd;
    basicRules?: BasicRules;
    /**
     * A generic object for storing special data for external use-cases. Keys prefixed with "rd-" should be added as "data-" HTML attributes when rendering to HTML.
     */
    data?: {
        [k: string]: unknown;
    };
    id?: string;
    attributes: (
        | "str"
        | "dex"
        | "con"
        | "int"
        | "wis"
        | "cha"
        | "spellcasting"
    )[];
}
export interface EntryAbilityAttackMod {
    name: string;
    type: string;
    source?: string;
    page?: Page;
    srd?: Srd;
    basicRules?: BasicRules;
    /**
     * A generic object for storing special data for external use-cases. Keys prefixed with "rd-" should be added as "data-" HTML attributes when rendering to HTML.
     */
    data?: {
        [k: string]: unknown;
    };
    id?: string;
    attributes: (
        | "str"
        | "dex"
        | "con"
        | "int"
        | "wis"
        | "cha"
        | "spellcasting"
    )[];
}
export interface AbilityGeneric {
    name?: string;
    type: string;
    source?: string;
    page?: Page;
    srd?: Srd;
    basicRules?: BasicRules;
    /**
     * A generic object for storing special data for external use-cases. Keys prefixed with "rd-" should be added as "data-" HTML attributes when rendering to HTML.
     */
    data?: {
        [k: string]: unknown;
    };
    id?: string;
    text: string;
    attributes?: ("str" | "dex" | "con" | "int" | "wis" | "cha")[];
}
export interface EntryLink {
    name?: string;
    type: string;
    source?: string;
    page?: Page;
    srd?: Srd;
    basicRules?: BasicRules;
    /**
     * A generic object for storing special data for external use-cases. Keys prefixed with "rd-" should be added as "data-" HTML attributes when rendering to HTML.
     */
    data?: {
        [k: string]: unknown;
    };
    id?: string;
    text: string;
    href:
        | {
              type?: {
                  [k: string]: unknown;
              };
              path: string;
              hash?: string;
              hashPreEncoded?: boolean;
              subhashes?: (
                  | {
                        key: string;
                        values: string[];
                        preEncoded?: boolean;
                    }
                  | {
                        key: string;
                        value: string;
                        preEncoded?: boolean;
                    }
              )[];
              hover?: {
                  page: Page;
                  source: string;
                  /**
                   * Optional; overrides the href hash for hover handlers.
                   */
                  hash?: string;
                  hashPreEncoded?: boolean;
              };
          }
        | {
              type?: {
                  [k: string]: unknown;
              };
              url: string;
          };
}
/**
 * For e.g. Eldritch Invocations which require prerequisite text
 */
export interface EntryOptFeature {
    name: string;
    type: string;
    source?: string;
    page?: Page;
    srd?: Srd;
    basicRules?: BasicRules;
    /**
     * A generic object for storing special data for external use-cases. Keys prefixed with "rd-" should be added as "data-" HTML attributes when rendering to HTML.
     */
    data?: {
        [k: string]: unknown;
    };
    id?: string;
    prerequisite?: string;
    entries?: BestiarySchema[];
}
export interface EntryInset {
    name?: string;
    type: string;
    source?: string;
    page?: Page;
    srd?: Srd;
    basicRules?: BasicRules;
    /**
     * A generic object for storing special data for external use-cases. Keys prefixed with "rd-" should be added as "data-" HTML attributes when rendering to HTML.
     */
    data?: {
        [k: string]: unknown;
    };
    id?: string;
    entries: BestiarySchema[];
    style?: string;
}
export interface EntryInsetReadaloud {
    name?: string;
    type: string;
    source?: string;
    page?: Page;
    srd?: Srd;
    basicRules?: BasicRules;
    /**
     * A generic object for storing special data for external use-cases. Keys prefixed with "rd-" should be added as "data-" HTML attributes when rendering to HTML.
     */
    data?: {
        [k: string]: unknown;
    };
    id?: string;
    entries: BestiarySchema[];
    style?: string;
}
export interface EntryVariant {
    name: string;
    type: string;
    source?: string;
    page?: Page;
    srd?: Srd;
    basicRules?: BasicRules;
    /**
     * A generic object for storing special data for external use-cases. Keys prefixed with "rd-" should be added as "data-" HTML attributes when rendering to HTML.
     */
    data?: {
        [k: string]: unknown;
    };
    id?: string;
    entries: BestiarySchema[];
}
export interface EntryVariantInner {
    name: string;
    type: string;
    source?: string;
    page?: Page;
    srd?: Srd;
    basicRules?: BasicRules;
    /**
     * A generic object for storing special data for external use-cases. Keys prefixed with "rd-" should be added as "data-" HTML attributes when rendering to HTML.
     */
    data?: {
        [k: string]: unknown;
    };
    id?: string;
    entries: BestiarySchema[];
}
export interface EntryVariantSub {
    name: string;
    type: string;
    source?: string;
    page?: Page;
    srd?: Srd;
    basicRules?: BasicRules;
    /**
     * A generic object for storing special data for external use-cases. Keys prefixed with "rd-" should be added as "data-" HTML attributes when rendering to HTML.
     */
    data?: {
        [k: string]: unknown;
    };
    id?: string;
    entries: BestiarySchema[];
}
export interface EntryItemSub {
    name: string;
    type: string;
    source?: string;
    page?: Page;
    srd?: Srd;
    basicRules?: BasicRules;
    /**
     * A generic object for storing special data for external use-cases. Keys prefixed with "rd-" should be added as "data-" HTML attributes when rendering to HTML.
     */
    data?: {
        [k: string]: unknown;
    };
    id?: string;
    entry: BestiarySchema;
    nameDot?: {
        [k: string]: unknown;
    };
}
export interface EntryItemSpell {
    name: string;
    type: string;
    source?: string;
    page?: Page;
    srd?: Srd;
    basicRules?: BasicRules;
    /**
     * A generic object for storing special data for external use-cases. Keys prefixed with "rd-" should be added as "data-" HTML attributes when rendering to HTML.
     */
    data?: {
        [k: string]: unknown;
    };
    id?: string;
    entry: BestiarySchema;
}
export interface EntryImage {
    name?: string;
    type: string;
    source?: string;
    page?: Page;
    srd?: Srd;
    basicRules?: BasicRules;
    /**
     * A generic object for storing special data for external use-cases. Keys prefixed with "rd-" should be added as "data-" HTML attributes when rendering to HTML.
     */
    data?: {
        [k: string]: unknown;
    };
    id?: string;
    href: MediaHref;
    hrefThumbnail?: AThumbnailImageUsedInRareCasesEGWhenLoadingAWallOfMapsToChooseFromInTheDMScreen;
    title?: string;
    /**
     * For accessibility purposes
     */
    altText?: string;
    imageType?: "map" | "mapPlayer";
    grid?: {
        type?:
            | "none"
            | "square"
            | "hexRowsOdd"
            | "hexRowsEven"
            | "hexColsOdd"
            | "hexColsEven";
        size?: number;
        offsetX?: number;
        offsetY?: number;
        /**
         * Map image scaling. Where possible, avoid using this, and use size/offset instead.
         */
        scale?: number;
    };
    mapRegions?: {
        area?: string;
        points?: [number, number][];
    }[];
    /**
     * Note that the order of transformations is: scale, then offset.
     */
    mapParent?: {
        id?: string;
        /**
         * The X position of this map within the parent map. Defaults to 0.
         */
        offsetX?: number;
        /**
         * The Y position of this map within the parent map. Defaults to 0.
         */
        offsetY?: number;
        /**
         * X scaling required for this map to match the parent map. Defaults to 1.
         */
        scaleX?: number;
        /**
         * Y scaling required for this map to match the parent map. Defaults to 1.
         */
        scaleY?: number;
        /**
         * If the X/Y scaling for this map should be based on the size ratio between the two. This is often used a placeholder for maps requiring future manual adjustment.
         */
        autoScale?: boolean;
    };
    mapName?: string;
    width?: number;
    height?: number;
    /**
     * Specify the max desired display width of the images, as opposed to "width" which should only be used for the _real_ width. Assumes pixels by default.
     */
    maxWidth?: number;
    /**
     * As per "maxWidth"
     */
    maxHeight?: number;
    maxWidthUnits?: string;
    maxHeightUnits?: string;
    style?: "comic-speaker-left" | "comic-speaker-right" | "deity-symbol";
}
export interface EntryGallery {
    name?: string;
    type: string;
    source?: string;
    page?: Page;
    srd?: Srd;
    basicRules?: BasicRules;
    /**
     * A generic object for storing special data for external use-cases. Keys prefixed with "rd-" should be added as "data-" HTML attributes when rendering to HTML.
     */
    data?: {
        [k: string]: unknown;
    };
    id?: string;
    images: EntryImage[];
}
export interface EntryActions {
    name: string;
    type: string;
    source?: string;
    page?: Page;
    srd?: Srd;
    basicRules?: BasicRules;
    /**
     * A generic object for storing special data for external use-cases. Keys prefixed with "rd-" should be added as "data-" HTML attributes when rendering to HTML.
     */
    data?: {
        [k: string]: unknown;
    };
    id?: string;
    entries: BestiarySchema[];
}
export interface EntryAttack {
    name?: string;
    type: string;
    source?: string;
    page?: Page;
    srd?: Srd;
    basicRules?: BasicRules;
    /**
     * A generic object for storing special data for external use-cases. Keys prefixed with "rd-" should be added as "data-" HTML attributes when rendering to HTML.
     */
    data?: {
        [k: string]: unknown;
    };
    id?: string;
    /**
     * MW: Melee Weapon
     *  RW: Ranged Weapon
     */
    attackType: "MW" | "RW";
    attackEntries: BestiarySchema[];
    hitEntries: BestiarySchema[];
}
export interface EntryDataCreature {
    type: {
        [k: string]: unknown;
    };
    style?: _EntryDataStyle;
    [k: string]: unknown;
}
export interface EntryDataSpell {
    type: {
        [k: string]: unknown;
    };
    style?: _EntryDataStyle;
    dataSpell: Spell;
    [k: string]: unknown;
}
export interface Time {
    number?: number;
    unit: "action" | "bonus" | "reaction" | "round" | "minute" | "hour";
    condition?: string;
}
export interface Duration {
    type: "instant" | "timed" | "permanent" | "special";
    duration?: {
        type: "hour" | "minute" | "turn" | "round" | "week" | "day" | "year";
        amount?: number;
        upTo?: boolean;
    };
    concentration?: boolean;
    ends?: ("dispel" | "trigger" | "discharge")[];
    condition?: string;
}
export interface EntryDataTrapHazard {
    type: {
        [k: string]: unknown;
    };
    style?: _EntryDataStyle;
    [k: string]: unknown;
}
export interface EntryDataObject {
    type: {
        [k: string]: unknown;
    };
    style?: _EntryDataStyle;
    [k: string]: unknown;
}
export interface EntryDataItem {
    type: {
        [k: string]: unknown;
    };
    style?: _EntryDataStyle;
    [k: string]: unknown;
}
/**
 * For use in classes page content only.
 */
export interface EntryRefClassFeature {
    type: {
        [k: string]: unknown;
    };
    classFeature: string;
    [k: string]: unknown;
}
/**
 * For use in classes page content only.
 */
export interface EntryRefSubclassFeature {
    type: {
        [k: string]: unknown;
    };
    subclassFeature: string;
    [k: string]: unknown;
}
/**
 * For use in classes page content only.
 */
export interface EntryRefOptionalfeature {
    type: {
        [k: string]: unknown;
    };
    optionalfeature: string;
    name?: string;
    [k: string]: unknown;
}
export interface EntryHr {
    type: {
        [k: string]: unknown;
    };
    [k: string]: unknown;
}
export interface EntryFlowchart {
    name?: string;
    type: string;
    source?: string;
    page?: Page;
    srd?: Srd;
    basicRules?: BasicRules;
    /**
     * A generic object for storing special data for external use-cases. Keys prefixed with "rd-" should be added as "data-" HTML attributes when rendering to HTML.
     */
    data?: {
        [k: string]: unknown;
    };
    id?: string;
    blocks: Entry[];
}
export interface Entry {
    name?: string;
    type: string;
    source?: string;
    page?: Page;
    srd?: Srd;
    basicRules?: BasicRules;
    /**
     * A generic object for storing special data for external use-cases. Keys prefixed with "rd-" should be added as "data-" HTML attributes when rendering to HTML.
     */
    data?: {
        [k: string]: unknown;
    };
    id?: string;
    [k: string]: unknown;
}
export interface EntryFlowBlock {
    name?: string;
    type: string;
    source?: string;
    page?: Page;
    srd?: Srd;
    basicRules?: BasicRules;
    /**
     * A generic object for storing special data for external use-cases. Keys prefixed with "rd-" should be added as "data-" HTML attributes when rendering to HTML.
     */
    data?: {
        [k: string]: unknown;
    };
    id?: string;
    entries?: Entry[];
}

export interface EntryWrapped {
    name?: string;
    type: string;
    source?: string;
    page?: Page;
    srd?: Srd;
    basicRules?: BasicRules;
    /**
     * A generic object for storing special data for external use-cases. Keys prefixed with "rd-" should be added as "data-" HTML attributes when rendering to HTML.
     */
    data?: {
        [k: string]: unknown;
    };
    id?: string;
    wrapped: unknown;
}
export interface Class {
    name: string;
    source: string;
    definedInSource?: string;
}
export interface ScalingLevelDiceItem {
    label?: string;
    scaling?: {
        /**
         * This interface was referenced by `undefined`'s JSON-Schema definition
         * via the `patternProperty` "\d+".
         */
        [k: string]: string;
    };
}
export interface _ModObject {
    /**
     * This interface was referenced by `_ModObject`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     */
    [k: string]: string | CopyModifier | CopyModifier[];
}
export interface CreatureData {
    name?: string;
    /**
     * Used anywhere a shortened form of the creatures name is required (e.g. in legendary action headers).
     * If not supplied, a shortened name will be automatically generated from the creature's full name.
     * Alternatively use "true" if the "shortName" should be an exact copy of the creature's "name".
     */
    shortName?: string | boolean;
    alias?: string[];
    /**
     * A group name, indexed by search. E.g. searching "Lycanthrope" would otherwise fail to find anything.
     * Only works on the bestiary page, not in the full site search.
     */
    group?: null | string[];
    /**
     * Used in sidekicks, which can have levels (and generally do not have alignment)
     */
    level?: number;
    size?: Size[];
    sizeNote?: string;
    type?:
        | {
              type: CreatureType;
              /**
               * Size of the individual creatures that make up the swarm.
               */
              swarmSize?:
                  | "F"
                  | "D"
                  | "T"
                  | "S"
                  | "M"
                  | "L"
                  | "H"
                  | "G"
                  | "C"
                  | "V";
              tags?: (
                  | string
                  | {
                        tag: string;
                        prefix: string;
                    }
              )[];
          }
        | CreatureType;
    source?: string;
    /**
     * Sub-source text that is shown when hovered.
     */
    sourceSub?: string;
    otherSources?: OtherSources;
    reprintedAs?: ReprintedAs;
    alignment?: Align[];
    alignmentPrefix?: string;
    ac?: AcItem[];
    hp?:
        | {
              average: number;
              formula: string;
          }
        | {
              special?: string;
          };
    speed?: Speed;
    str?: number | null;
    dex?: number | null;
    con?: number | null;
    int?: number | null;
    wis?: number | null;
    cha?: number | null;
    save?: {
        str?: string;
        dex?: string;
        con?: string;
        int?: string;
        wis?: string;
        cha?: string;
    };
    skill?: {
        acrobatics?: string;
        "animal handling"?: string;
        arcana?: string;
        athletics?: string;
        deception?: string;
        history?: string;
        insight?: string;
        intimidation?: string;
        investigation?: string;
        medicine?: string;
        nature?: string;
        perception?: string;
        performance?: string;
        persuasion?: string;
        religion?: string;
        "sleight of hand"?: string;
        stealth?: string;
        survival?: string;
        other?: {
            oneOf?: {
                acrobatics?: string;
                "animal handling"?: string;
                arcana?: string;
                athletics?: string;
                deception?: string;
                history?: string;
                insight?: string;
                intimidation?: string;
                investigation?: string;
                medicine?: string;
                nature?: string;
                perception?: string;
                performance?: string;
                persuasion?: string;
                religion?: string;
                "sleight of hand"?: string;
                stealth?: string;
                survival?: string;
                [k: string]: unknown;
            };
            [k: string]: unknown;
        }[];
    };
    senses?: string[] | null;
    passive?: number | string | null;
    languages?: string[] | null;
    pbNote?: string;
    cr?:
        | string
        | {
              cr: string;
              lair?: string;
              coven?: string;
              xp?: number;
          };
    vulnerable?: DamageVulnerabilityArray;
    resist?: DamageResistArray;
    immune?: DamageImmunityArray;
    conditionImmune?: ConditionImmunityArray;
    spellcasting?: EntrySpellcasting[] | null;
    trait?:
        | {
              name: string;
              entries: (
                  | EntrySection
                  | EntryEntries
                  | EntryQuote
                  | EntryInlineEntries
                  | EntryEntriesInlineEntries
                  | EntryOptions
                  | EntryTableGroup
                  | EntryTable
                  | EntryTableRow
                  | EntryTableCell
                  | EntryList
                  | EntryBonus
                  | EntryBonusSpeed
                  | EntryDice
                  | EntryAbilityDc
                  | EntryAbilityAttackMod
                  | AbilityGeneric
                  | EntryLink
                  | EntryOptFeature
                  | EntryInset
                  | EntryInsetReadaloud
                  | EntryVariant
                  | EntryVariantInner
                  | EntryVariantSub
                  | EntryItem
                  | EntryItemSub
                  | EntryItemSpell
                  | EntryImage
                  | EntryGallery
                  | EntryActions
                  | EntryAttack
                  | EntryDataCreature
                  | EntryDataSpell
                  | EntryDataTrapHazard
                  | EntryDataObject
                  | EntryDataItem
                  | EntryStatblock
                  | EntryRefClassFeature
                  | EntryRefSubclassFeature
                  | EntryRefOptionalfeature
                  | EntryHr
                  | EntrySpellcasting
                  | EntryFlowchart
                  | EntryFlowBlock
                  | EntryWrapped
                  | string
                  | number
              )[];
              type?: "entries" | "inset";
              /**
               * Forces a sort order. Traits with sort orders will always be arranged before those without.
               */
              sort?: number;
          }[]
        | null;
    actionNote?: string;
    actionHeader?: (
        | EntrySection
        | EntryEntries
        | EntryQuote
        | EntryInlineEntries
        | EntryEntriesInlineEntries
        | EntryOptions
        | EntryTableGroup
        | EntryTable
        | EntryTableRow
        | EntryTableCell
        | EntryList
        | EntryBonus
        | EntryBonusSpeed
        | EntryDice
        | EntryAbilityDc
        | EntryAbilityAttackMod
        | AbilityGeneric
        | EntryLink
        | EntryOptFeature
        | EntryInset
        | EntryInsetReadaloud
        | EntryVariant
        | EntryVariantInner
        | EntryVariantSub
        | EntryItem
        | EntryItemSub
        | EntryItemSpell
        | EntryImage
        | EntryGallery
        | EntryActions
        | EntryAttack
        | EntryDataCreature
        | EntryDataSpell
        | EntryDataTrapHazard
        | EntryDataObject
        | EntryDataItem
        | EntryStatblock
        | EntryRefClassFeature
        | EntryRefSubclassFeature
        | EntryRefOptionalfeature
        | EntryHr
        | EntrySpellcasting
        | EntryFlowchart
        | EntryFlowBlock
        | EntryWrapped
        | string
        | number
    )[];
    action?:
        | {
              name: string;
              entries: (
                  | EntrySection
                  | EntryEntries
                  | EntryQuote
                  | EntryInlineEntries
                  | EntryEntriesInlineEntries
                  | EntryOptions
                  | EntryTableGroup
                  | EntryTable
                  | EntryTableRow
                  | EntryTableCell
                  | EntryList
                  | EntryBonus
                  | EntryBonusSpeed
                  | EntryDice
                  | EntryAbilityDc
                  | EntryAbilityAttackMod
                  | AbilityGeneric
                  | EntryLink
                  | EntryOptFeature
                  | EntryInset
                  | EntryInsetReadaloud
                  | EntryVariant
                  | EntryVariantInner
                  | EntryVariantSub
                  | EntryItem
                  | EntryItemSub
                  | EntryItemSpell
                  | EntryImage
                  | EntryGallery
                  | EntryActions
                  | EntryAttack
                  | EntryDataCreature
                  | EntryDataSpell
                  | EntryDataTrapHazard
                  | EntryDataObject
                  | EntryDataItem
                  | EntryStatblock
                  | EntryRefClassFeature
                  | EntryRefSubclassFeature
                  | EntryRefOptionalfeature
                  | EntryHr
                  | EntrySpellcasting
                  | EntryFlowchart
                  | EntryFlowBlock
                  | EntryWrapped
                  | string
                  | number
              )[];
          }[]
        | null;
    bonusNote?: string;
    bonusHeader?: (
        | EntrySection
        | EntryEntries
        | EntryQuote
        | EntryInlineEntries
        | EntryEntriesInlineEntries
        | EntryOptions
        | EntryTableGroup
        | EntryTable
        | EntryTableRow
        | EntryTableCell
        | EntryList
        | EntryBonus
        | EntryBonusSpeed
        | EntryDice
        | EntryAbilityDc
        | EntryAbilityAttackMod
        | AbilityGeneric
        | EntryLink
        | EntryOptFeature
        | EntryInset
        | EntryInsetReadaloud
        | EntryVariant
        | EntryVariantInner
        | EntryVariantSub
        | EntryItem
        | EntryItemSub
        | EntryItemSpell
        | EntryImage
        | EntryGallery
        | EntryActions
        | EntryAttack
        | EntryDataCreature
        | EntryDataSpell
        | EntryDataTrapHazard
        | EntryDataObject
        | EntryDataItem
        | EntryStatblock
        | EntryRefClassFeature
        | EntryRefSubclassFeature
        | EntryRefOptionalfeature
        | EntryHr
        | EntrySpellcasting
        | EntryFlowchart
        | EntryFlowBlock
        | EntryWrapped
        | string
        | number
    )[];
    bonus?: {
        name: string;
        entries: (
            | EntrySection
            | EntryEntries
            | EntryQuote
            | EntryInlineEntries
            | EntryEntriesInlineEntries
            | EntryOptions
            | EntryTableGroup
            | EntryTable
            | EntryTableRow
            | EntryTableCell
            | EntryList
            | EntryBonus
            | EntryBonusSpeed
            | EntryDice
            | EntryAbilityDc
            | EntryAbilityAttackMod
            | AbilityGeneric
            | EntryLink
            | EntryOptFeature
            | EntryInset
            | EntryInsetReadaloud
            | EntryVariant
            | EntryVariantInner
            | EntryVariantSub
            | EntryItem
            | EntryItemSub
            | EntryItemSpell
            | EntryImage
            | EntryGallery
            | EntryActions
            | EntryAttack
            | EntryDataCreature
            | EntryDataSpell
            | EntryDataTrapHazard
            | EntryDataObject
            | EntryDataItem
            | EntryStatblock
            | EntryRefClassFeature
            | EntryRefSubclassFeature
            | EntryRefOptionalfeature
            | EntryHr
            | EntrySpellcasting
            | EntryFlowchart
            | EntryFlowBlock
            | EntryWrapped
            | string
            | number
        )[];
    }[];
    reactionNote?: string;
    reactionHeader?: (
        | EntrySection
        | EntryEntries
        | EntryQuote
        | EntryInlineEntries
        | EntryEntriesInlineEntries
        | EntryOptions
        | EntryTableGroup
        | EntryTable
        | EntryTableRow
        | EntryTableCell
        | EntryList
        | EntryBonus
        | EntryBonusSpeed
        | EntryDice
        | EntryAbilityDc
        | EntryAbilityAttackMod
        | AbilityGeneric
        | EntryLink
        | EntryOptFeature
        | EntryInset
        | EntryInsetReadaloud
        | EntryVariant
        | EntryVariantInner
        | EntryVariantSub
        | EntryItem
        | EntryItemSub
        | EntryItemSpell
        | EntryImage
        | EntryGallery
        | EntryActions
        | EntryAttack
        | EntryDataCreature
        | EntryDataSpell
        | EntryDataTrapHazard
        | EntryDataObject
        | EntryDataItem
        | EntryStatblock
        | EntryRefClassFeature
        | EntryRefSubclassFeature
        | EntryRefOptionalfeature
        | EntryHr
        | EntrySpellcasting
        | EntryFlowchart
        | EntryFlowBlock
        | EntryWrapped
        | string
        | number
    )[];
    reaction?: {
        name: string;
        entries: (
            | EntrySection
            | EntryEntries
            | EntryQuote
            | EntryInlineEntries
            | EntryEntriesInlineEntries
            | EntryOptions
            | EntryTableGroup
            | EntryTable
            | EntryTableRow
            | EntryTableCell
            | EntryList
            | EntryBonus
            | EntryBonusSpeed
            | EntryDice
            | EntryAbilityDc
            | EntryAbilityAttackMod
            | AbilityGeneric
            | EntryLink
            | EntryOptFeature
            | EntryInset
            | EntryInsetReadaloud
            | EntryVariant
            | EntryVariantInner
            | EntryVariantSub
            | EntryItem
            | EntryItemSub
            | EntryItemSpell
            | EntryImage
            | EntryGallery
            | EntryActions
            | EntryAttack
            | EntryDataCreature
            | EntryDataSpell
            | EntryDataTrapHazard
            | EntryDataObject
            | EntryDataItem
            | EntryStatblock
            | EntryRefClassFeature
            | EntryRefSubclassFeature
            | EntryRefOptionalfeature
            | EntryHr
            | EntrySpellcasting
            | EntryFlowchart
            | EntryFlowBlock
            | EntryWrapped
            | string
            | number
        )[];
    }[];
    legendaryGroup?: {
        name?: string;
        source?: string;
        [k: string]: unknown;
    };
    legendaryActions?: number;
    legendaryHeader?: (
        | EntrySection
        | EntryEntries
        | EntryQuote
        | EntryInlineEntries
        | EntryEntriesInlineEntries
        | EntryOptions
        | EntryTableGroup
        | EntryTable
        | EntryTableRow
        | EntryTableCell
        | EntryList
        | EntryBonus
        | EntryBonusSpeed
        | EntryDice
        | EntryAbilityDc
        | EntryAbilityAttackMod
        | AbilityGeneric
        | EntryLink
        | EntryOptFeature
        | EntryInset
        | EntryInsetReadaloud
        | EntryVariant
        | EntryVariantInner
        | EntryVariantSub
        | EntryItem
        | EntryItemSub
        | EntryItemSpell
        | EntryImage
        | EntryGallery
        | EntryActions
        | EntryAttack
        | EntryDataCreature
        | EntryDataSpell
        | EntryDataTrapHazard
        | EntryDataObject
        | EntryDataItem
        | EntryStatblock
        | EntryRefClassFeature
        | EntryRefSubclassFeature
        | EntryRefOptionalfeature
        | EntryHr
        | EntrySpellcasting
        | EntryFlowchart
        | EntryFlowBlock
        | EntryWrapped
        | string
        | number
    )[];
    legendary?:
        | {
              name?: string;
              entries: (
                  | EntrySection
                  | EntryEntries
                  | EntryQuote
                  | EntryInlineEntries
                  | EntryEntriesInlineEntries
                  | EntryOptions
                  | EntryTableGroup
                  | EntryTable
                  | EntryTableRow
                  | EntryTableCell
                  | EntryList
                  | EntryBonus
                  | EntryBonusSpeed
                  | EntryDice
                  | EntryAbilityDc
                  | EntryAbilityAttackMod
                  | AbilityGeneric
                  | EntryLink
                  | EntryOptFeature
                  | EntryInset
                  | EntryInsetReadaloud
                  | EntryVariant
                  | EntryVariantInner
                  | EntryVariantSub
                  | EntryItem
                  | EntryItemSub
                  | EntryItemSpell
                  | EntryImage
                  | EntryGallery
                  | EntryActions
                  | EntryAttack
                  | EntryDataCreature
                  | EntryDataSpell
                  | EntryDataTrapHazard
                  | EntryDataObject
                  | EntryDataItem
                  | EntryStatblock
                  | EntryRefClassFeature
                  | EntryRefSubclassFeature
                  | EntryRefOptionalfeature
                  | EntryHr
                  | EntrySpellcasting
                  | EntryFlowchart
                  | EntryFlowBlock
                  | EntryWrapped
                  | string
                  | number
              )[];
          }[]
        | null;
    mythicHeader?: (
        | EntrySection
        | EntryEntries
        | EntryQuote
        | EntryInlineEntries
        | EntryEntriesInlineEntries
        | EntryOptions
        | EntryTableGroup
        | EntryTable
        | EntryTableRow
        | EntryTableCell
        | EntryList
        | EntryBonus
        | EntryBonusSpeed
        | EntryDice
        | EntryAbilityDc
        | EntryAbilityAttackMod
        | AbilityGeneric
        | EntryLink
        | EntryOptFeature
        | EntryInset
        | EntryInsetReadaloud
        | EntryVariant
        | EntryVariantInner
        | EntryVariantSub
        | EntryItem
        | EntryItemSub
        | EntryItemSpell
        | EntryImage
        | EntryGallery
        | EntryActions
        | EntryAttack
        | EntryDataCreature
        | EntryDataSpell
        | EntryDataTrapHazard
        | EntryDataObject
        | EntryDataItem
        | EntryStatblock
        | EntryRefClassFeature
        | EntryRefSubclassFeature
        | EntryRefOptionalfeature
        | EntryHr
        | EntrySpellcasting
        | EntryFlowchart
        | EntryFlowBlock
        | EntryWrapped
        | string
        | number
    )[];
    mythic?: {
        name?: string;
        entries: (
            | EntrySection
            | EntryEntries
            | EntryQuote
            | EntryInlineEntries
            | EntryEntriesInlineEntries
            | EntryOptions
            | EntryTableGroup
            | EntryTable
            | EntryTableRow
            | EntryTableCell
            | EntryList
            | EntryBonus
            | EntryBonusSpeed
            | EntryDice
            | EntryAbilityDc
            | EntryAbilityAttackMod
            | AbilityGeneric
            | EntryLink
            | EntryOptFeature
            | EntryInset
            | EntryInsetReadaloud
            | EntryVariant
            | EntryVariantInner
            | EntryVariantSub
            | EntryItem
            | EntryItemSub
            | EntryItemSpell
            | EntryImage
            | EntryGallery
            | EntryActions
            | EntryAttack
            | EntryDataCreature
            | EntryDataSpell
            | EntryDataTrapHazard
            | EntryDataObject
            | EntryDataItem
            | EntryStatblock
            | EntryRefClassFeature
            | EntryRefSubclassFeature
            | EntryRefOptionalfeature
            | EntryHr
            | EntrySpellcasting
            | EntryFlowchart
            | EntryFlowBlock
            | EntryWrapped
            | string
            | number
        )[];
    }[];
    variant?: EntryVariantBestiary[];
    page?: Page;
    familiar?: boolean;
    additionalSources?: AdditionalSources;
    hasToken?: boolean;
    tokenUrl?: string;
    altArt?: {
        name: string;
        source: string;
        page?: Page;
        [k: string]: unknown;
    }[];
    isNamedCreature?: boolean;
    /**
     * Used to flag adventure NPCs
     */
    isNpc?: boolean;
    environment?: (
        | "underwater"
        | "coastal"
        | "mountain"
        | "grassland"
        | "hill"
        | "arctic"
        | "urban"
        | "forest"
        | "swamp"
        | "underdark"
        | "desert"
    )[];
    soundClip?: MediaHref;
    dragonCastingColor?:
        | "black"
        | "blue"
        | "green"
        | "red"
        | "white"
        | "brass"
        | "bronze"
        | "copper"
        | "gold"
        | "silver"
        | "deep";
    dragonAge?:
        | "young"
        | "adult"
        | "wyrmling"
        | "greatwyrm"
        | "ancient"
        | "aspect";
    traitTags?: (
        | "Aggressive"
        | "Ambusher"
        | "Amorphous"
        | "Amphibious"
        | "Antimagic Susceptibility"
        | "Brute"
        | "Charge"
        | "Damage Absorption"
        | "Death Burst"
        | "Devil's Sight"
        | "False Appearance"
        | "Fey Ancestry"
        | "Flyby"
        | "Hold Breath"
        | "Illumination"
        | "Immutable Form"
        | "Incorporeal Movement"
        | "Keen Senses"
        | "Legendary Resistances"
        | "Light Sensitivity"
        | "Magic Resistance"
        | "Magic Weapons"
        | "Pack Tactics"
        | "Pounce"
        | "Rampage"
        | "Reckless"
        | "Regeneration"
        | "Rejuvenation"
        | "Shapechanger"
        | "Siege Monster"
        | "Sneak Attack"
        | "Spell Immunity"
        | "Spider Climb"
        | "Sunlight Sensitivity"
        | "Tree Stride"
        | "Turn Immunity"
        | "Turn Resistance"
        | "Undead Fortitude"
        | "Unusual Nature"
        | "Water Breathing"
        | "Web Sense"
        | "Web Walker"
    )[];
    actionTags?: (
        | "Breath Weapon"
        | "Frightful Presence"
        | "Multiattack"
        | "Parry"
        | "Shapechanger"
        | "Swallow"
        | "Teleport"
        | "Tentacles"
    )[];
    languageTags?: (
        | "AB"
        | "AQ"
        | "AU"
        | "C"
        | "CE"
        | "CS"
        | "D"
        | "DR"
        | "DS"
        | "DU"
        | "E"
        | "G"
        | "GI"
        | "GO"
        | "GTH"
        | "H"
        | "I"
        | "IG"
        | "LF"
        | "O"
        | "OTH"
        | "P"
        | "S"
        | "T"
        | "TC"
        | "TP"
        | "U"
        | "X"
        | "XX"
    )[];
    senseTags?: ("B" | "D" | "SD" | "T" | "U")[];
    spellcastingTags?: (
        | "P"
        | "I"
        | "F"
        | "S"
        | "O"
        | "CA"
        | "CB"
        | "CC"
        | "CD"
        | "CP"
        | "CR"
        | "CS"
        | "CL"
        | "CW"
    )[];
    damageTags?: DataDamageTags[];
    damageTagsSpell?: DataDamageTags[];
    damageTagsLegendary?: DataDamageTags[];
    miscTags?: ("AOE" | "HPR" | "MW" | "RW" | "RCH" | "RNG" | "THW")[];
    conditionInflict?: TagsConditions;
    conditionInflictLegendary?: TagsConditions;
    conditionInflictSpell?: TagsConditions;
    /**
     * Intended for homebrew use only.
     */
    footer?: (
        | EntrySection
        | EntryEntries
        | EntryQuote
        | EntryInlineEntries
        | EntryEntriesInlineEntries
        | EntryOptions
        | EntryTableGroup
        | EntryTable
        | EntryTableRow
        | EntryTableCell
        | EntryList
        | EntryBonus
        | EntryBonusSpeed
        | EntryDice
        | EntryAbilityDc
        | EntryAbilityAttackMod
        | AbilityGeneric
        | EntryLink
        | EntryOptFeature
        | EntryInset
        | EntryInsetReadaloud
        | EntryVariant
        | EntryVariantInner
        | EntryVariantSub
        | EntryItem
        | EntryItemSub
        | EntryItemSpell
        | EntryImage
        | EntryGallery
        | EntryActions
        | EntryAttack
        | EntryDataCreature
        | EntryDataSpell
        | EntryDataTrapHazard
        | EntryDataObject
        | EntryDataItem
        | EntryStatblock
        | EntryRefClassFeature
        | EntryRefSubclassFeature
        | EntryRefOptionalfeature
        | EntryHr
        | EntrySpellcasting
        | EntryFlowchart
        | EntryFlowBlock
        | EntryWrapped
        | string
        | number
    )[];
    srd?: Srd;
    basicRules?: BasicRules;
    /**
     * The spell used to summon this creature; specifically for TCE-esque summon spells.
     */
    summonedBySpell?: string;
    /**
     * The level of the spell used to summon this creature; specifically for TCE-esque summon spells.
     */
    summonedBySpellLevel?: number;
    /**
     * The class which can summon this creature; e.g. for those granted by some TCE class features.
     */
    summonedByClass?: string;
    /**
     * An internal flag indicating this creature is a copy of another, and is a temporary/placeholder entry which will be factored out using the "_copy" format at a later date.
     */
    _isCopy?: boolean;
    _versions?: CreatureVersion[];
    hasFluff?: boolean;
    hasFluffImages?: boolean;
}
export interface MetaBlock {
    dependencies?: {
        monster?: string[];
        [k: string]: unknown;
    };
    otherSources?: {
        /**
         * Keys are other sources to be loaded; values are `otherSources` sources from that source to search for.
         */
        monster?: {
            [k: string]: unknown;
        };
        [k: string]: unknown;
    };
    [k: string]: unknown;
}
